cscope 15 /home/leauto/ecolink-sdk/ecolink-demo -q 0000000995 0000055065
	@debug.cpp

10 
	~"debug.h
"

13 
	#MAX_TAGS
 100

	)

16 
TIME_DBG
 
	gdbg
;

18 
TAG
 
	gègs
[
MAX_TAGS
] = {

22 { "Àd´m⁄", 
TRACE_Àd´m⁄
 },

23 { "ecﬁök", 
TRACE_ecﬁök
 },

24 { "libso", 
TRACE_libso
 },

25 { "múr‹", 
TRACE_múr‹
 },

26 { "ˇrùh⁄e", 
TRACE_ˇrùh⁄e
 },

29 
	gåa˚_mask
 = 0;

30 
	gåa˚_bô
 = 0;

31 
	gåa˚_cou¡
 = 0;

32 
±hªad_muãx_t
 
	gdbg_lock
 = 
PTHREAD_MUTEX_INITIALIZER
 ;

33 
	gßve_î∫o
;

34 
timevÆ
 
	ga5a_t
;

42 
	$check_poöt_ö_li°
(
‰om
, 
to
)

44 
i
 = 0;

45 ; 
i
 < 
MAX_CHECK_TIME
 ; i++) {

46 if(
dbg
.
_check_li°
[
i
][0] =
‰om
 &&

47 
dbg
.
_check_li°
[
i
][1] =
to
) {

48  
i
;

52 
dbg
.
_check_li°
[dbg.
_check_£q
][0] = 
‰om
;

53 
dbg
.
_check_li°
[dbg.
_check_£q
][1] = 
to
;

54 
dbg
.
_check_£q
 ++;

56  (
dbg
.
_check_£q
 - 1);

57 
	}
}

59 
	$åa˚_öô
(c⁄° * 
«me
)

62 c⁄° * 
p
 = 
	`gëív
("ECOLINK_TRACE_CFG");

63 c⁄° * 
q
;

65 i‡(
p
 =
NULL
)

67 
i
;

68 
i
 = 0 ; i < 
MAX_TAGS
 ; i ++) {

69 if(
ègs
[
i
].
èg
 !
NULL
) {

70 
	`¥ötf
("«mê%†èg[i] %s\n",
«me
 ,
ègs
[
i
].
èg
);

71 if(!
	`°rcmp
(
«me
,
ègs
[
i
].
èg
)) {

72 
åa˚_bô
 = 
ègs
[
i
].
Êag
 ;

77 
ègs
[
i
].
èg
 = 
«me
;

78 
åa˚_bô
 = 
ègs
[
i
].
Êag
 = (++ 
åa˚_cou¡
);

81 if(
i
 =
MAX_TAGS
 - 1) {

82 
	`¥ötf
("errorÑeach maxÅagsize\n");

89 *
p
) {

90 
Àn
, 
ègn
;

92 
q
 = 
	`°Ωbrk
(
p
, " ,:;");

93 i‡(
q
 =
NULL
) {

94 
q
 = 
p
 + 
	`°æí
(p);

96 
Àn
 = 
q
 - 
p
;

98 
ègn
 = 0; 
ègs
[ègn].
èg
 !
NULL
;Åagn++) {

99 
ègÀn
 = 
	`°æí
(
ègs
[
ègn
].
èg
);

101 i‡(
Àn
 =
ègÀn
 && !
	`memcmp
(
ègs
[
ègn
].
èg
, 
p
,Üen) ) {

102 
Êag
 = 
ègs
[
ègn
].flag;

103 i‡(
Êag
 == 0) {

104 
åa˚_mask
 = ~0;

105 
	`¥ötf
("èg = %04x\n",
åa˚_mask
);

108 
åa˚_mask
 |(1 << 
Êag
);

109 
	`¥ötf
("èg = %04x\n",
åa˚_mask
);

113 
p
 = 
q
;

114 i‡(*
p
)

115 
p
++;

118 
	}
}

120 
	$dump
(c⁄° * 
buf
, 
Àn
, 
ídün
){

121 
i
 = 0;

122 
	`Ârötf
(
°dîr
,"%d ms|%s|%s|%d|: ",

123 ()(
a5a_t
.
tv_£c
 * 1000 +á5a_t.
tv_u£c
 / 1000),

124 
ègs
[ègs[
åa˚_bô
].
Êag
].
èg
,
__FILE__
, 
__LINE__
);

125 
	`Ârötf
(
°dîr
,"dump\n");

126 if(
ídün
 == 0){

127 ;
i
 < 
Àn
; i++){

128 
	`Ârötf
(
°dîr
,"%02x ",
buf
[
i
]);

129 if((
i
+1) % 20 == 0)

130 
	`Ârötf
(
°dîr
,"\n");

134 ;
i
 < 
Àn
; i++){

135 
	`Ârötf
(
°dîr
,"%02x ",
buf
[
Àn
-
i
-1]);

136 if((
i
+1) % 20 == 0)

137 
	`Ârötf
(
°dîr
,"\n");

140 
	`Ârötf
(
°dîr
,"\n");

141 
	`fÊush
(
°dîr
);

142 
	}
}

	@debug.h

9 #i‚de‡
__DEBUG__H


10 
	#__DEBUG__H


	)

12 
	~<°dio.h
>

13 
	~<î∫o.h
>

14 
	~<sys/time.h
>

15 
	~<±hªad.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

19 #ifde‡
__˝lu•lus


24 
	#INTEGRATE_DEBUG


	)

28 
	#TIME_DEBUG


	)

29 
	#TRACE_DEBUG


	)

31 
	#LOG_FILE_PATH
 "/u§/≠p/ecﬁök.log"

	)

32 
	#MAX_CHECK_TIME
 100

	)

34 
	sTIME_DEBUG_STRUCT
 {

35 
timevÆ
 
t
[
MAX_CHECK_TIME
 ];

36 
_time_cou¡
[
MAX_CHECK_TIME
];

37 
_time_acc_vÆ
[
MAX_CHECK_TIME
];

38 
_check_li°
[
MAX_CHECK_TIME
][2];

39 
_cuºít_£q
;

40 
_check_£q
;

41 } 
	tTIME_DBG
;

45 c⁄° * 
èg
;

46 
Êag
;

47 } 
	tTAG
;

49 
åa˚_öô
(c⁄° * 
«me
);

50 
dump
(c⁄° * 
buf
, 
Àn
, 
ídün
);

53 
åa˚_mask
;

54 
åa˚_bô
;

55 
åa˚_cou¡
;

56 
±hªad_muãx_t
 
dbg_lock
;

57 
TAG
 
ègs
[];

58 
TIME_DBG
 
dbg
;

59 
ßve_î∫o
;

60 
timevÆ
 
a5a_t
;

62 
	#TRACE_GOGOGO
(
«me
Ë
	`åa˚_öô
(#«me);

	)

63 
	#ENABLE_TRACING
 ((
åa˚_mask
 & (1 << 
ègs
[
åa˚_bô
].
Êag
)Ë!0)

	)

65 
	#DBG
(...) \

67 i‡(
ENABLE_TRACING
) { \

68 
	`±hªad_muãx_lock
(&
dbg_lock
); \

69 
	`gëtimeofday
(&
a5a_t
,
NULL
); \

70 
	`Ârötf
(
°dîr
,"%d ms|%s|%s|%d|: ", \

71 ()(
a5a_t
.
tv_£c
 * 1000 +á5a_t.
tv_u£c
 / 1000), \

72 
ègs
[ègs[
åa˚_bô
].
Êag
].
èg
,
__FILE__
, 
__LINE__
); \

73 
î∫o
 = 
ßve_î∫o
; \

74 
	`Ârötf
(
°dîr
, 
__VA_ARGS__
 ); \

75 
	`fÊush
(
°dîr
); \

76 
	`±hªad_muãx_u∆ock
(&
dbg_lock
); \

77 
î∫o
 = 
ßve_î∫o
; \

79 }0)

	)

81 
	#DUMP_L
(
d©a
,
Àn
) \

83 if(
ENABLE_TRACING
){ \

84 
	`±hªad_muãx_lock
(&
dbg_lock
); \

85 
	`dump
(
d©a
,
Àn
,0); \

86 
	`±hªad_muãx_u∆ock
(&
dbg_lock
); \

88 }0)

	)

90 
check_poöt_ö_li°
(
‰om
, 
to
);

92 #ifde‡
TIME_DEBUG


94 
	#TIME_DECLARE
(Ë
TIME_DBG
 
dbg


	)

96 
	#TIME_INIT
() do{\

97 
dbg
.
_cuºít_£q
 = 0;\

98 
dbg
.
_check_£q
 = 0;\

99 
	`mem£t
(
dbg
.
_time_cou¡
,0,
MAX_CHECK_TIME
 * ());\

100 
	`mem£t
(
dbg
.
_check_li°
,0,
MAX_CHECK_TIME
 * 2 * ());\

101 
	`mem£t
(
dbg
.
_time_acc_vÆ
,0,
MAX_CHECK_TIME
 * ());\

102 }0)

	)

104 
	#TIME_INSERT
(
ödex
) do{\

105 
	`gëtimeofday
(&(
dbg
.
t
[
ödex
]),
NULL
);\

106 }0)

	)

108 
	#TIME_PRINT
(
evít
,
ödex
) do{\

109 
	`TIME_INSERT
(
ödex
);\

110 
	`¥ötf
("[%d ms] %s\n",
dbg
.
t
[
ödex
].
tv_£c
 * 1000 + dbg.t[ödex].
tv_u£c
 / 1000, 
evít
);\

111 }0)

	)

113 
	#TIME_CHECK
(
‰om
,
to
) do{\

114 
dbg
.
_time_acc_vÆ
[
	`check_poöt_ö_li°
(
‰om
,
to
)] +=((dbg.
t
[‰om].
tv_£c
-dbg.t[to].tv_£cË* 1000 + (dbg.t[‰om].
tv_u£c
-dbg.t[to].tv_usec) / 1000);\

115 
	`¥ötf
("t"#‰om"Åÿt"#to" co° %d ms\n",((
dbg
.
t
[
‰om
].
tv_£c
-dbg.t[
to
].tv_£cË* 1000 + (dbg.t[‰om].
tv_u£c
-dbg.t[to].tv_usec) / 1000));\

116 }0)

	)

119 
	#TIME_ROUND
(
‰om
,
to
) do{\

120 
dbg
.
_time_cou¡
[
	`check_poöt_ö_li°
(
‰om
,
to
)] ++;}0)

	)

122 
	#TIME_AVERAGE
(
c⁄ã¡
,
‰om
,
to
) do{\

123 
dbg
.
_cuºít_£q
 = 
	`check_poöt_ö_li°
(
‰om
,
to
);\

124 
dbg
.
_time_acc_vÆ
[dbg.
_cuºít_£q
] +=((dbg.
t
[
‰om
].
tv_£c
-dbg.t[
to
].tv_£c)* 1000 + (dbg.t[‰om].
tv_u£c
-dbg.t[to].tv_usec) / 1000);\

125 
	`¥ötf
("timêac¯=%Œd cou¡ = %Œd\n",
dbg
.
_time_acc_vÆ
[dbg.
_cuºít_£q
],dbg.
_time_cou¡
[dbg._current_seq]);\

126 if(
dbg
.
_time_cou¡
[dbg.
_cuºít_£q
] % 100 == 0){\

127 if(
dbg
.
_time_acc_vÆ
[dbg.
_cuºít_£q
] == 0){\

128 
dbg
.
_time_cou¡
[dbg.
_cuºít_£q
] = 0;\

131 
	`¥ötf
("<%s> cost %lld ms in %lldÅimes,áverage cost %lld ms/image , %lld frames/s\n,",\

132 
c⁄ã¡
,\

133 
dbg
.
_time_acc_vÆ
[dbg.
_cuºít_£q
],\

134 
dbg
.
_time_cou¡
[dbg.
_cuºít_£q
],\

135 
dbg
.
_time_acc_vÆ
[dbg.
_cuºít_£q
] / dbg.
_time_cou¡
[dbg._current_seq],\

136 1000 * 
dbg
.
_time_cou¡
[dbg.
_cuºít_£q
] / dbg.
_time_acc_vÆ
[dbg._current_seq]);\

138 }0)

	)

140 
	#TIME_DECLARE
()

	)

141 
	#TIME_IMPORT
()

	)

142 
	#TIME_INIT
()

	)

143 
	#TIME_INSERT
(
ödex
)

	)

144 
	#TIME_PRINT
(
evít
,
ödex
)

	)

145 
	#TIME_CHECK
(
‰om
,
to
)

	)

146 
	#TIME_ROUND
()

	)

147 
	#TIME_AVERAGE
(
c⁄ã¡
,
‰om
,
to
)

	)

150 #ifde‡
__˝lu•lus


	@demo.cpp

8 #i‚de‡
__DEMO_C


9 
	#__DEMO_C


	)

11 
	~<°dio.h
>

12 
	~"debug.h
"

13 
	~"°ªam.h
"

14 
	~"maöwödow.h
"

15 
	~"sdk.h
"

18 
MaöWödow
* 
wödow
;

20 
	$c⁄√˘
()

22 
	`DBG
("ˇŒback ->%s\n",
__FUNCTION__
);

23 
	`íabÀ_lök_å™s„r
();

24 
	`g°ªamî_öô
(0);

25 
	`g°ªamî_∂ay
();

26 
	}
}

28 
	$disc⁄√˘
()

30 
	`DBG
("ˇŒback ->%s\n",
__FUNCTION__
);

31 
	`g°ªamî_∑u£
();

32 
	`g°ªamî_ªÀa£
();

33 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
öô
.
jpg
));

34 
wödow
->
	`show_ecﬁök
();

35 
	`dißbÀ_lök_å™s„r
();

36 
	}
}

43 
	$°_ch™ged
(* 
°
)

49 *
°
)

51 
AndroidAdbNŸO≥√d
:

52 
	`DBG
("AndroidAdbNotOpened\n");

53 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
hñp
-
™droid
.
jpg
));

55 
AndroidO∆öe
:

56 
	`DBG
("AndroidOnline\n");

57 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
c⁄√˘ög
.
jpg
));

58 
wödow
->
	`show_ecﬁök
();

60 
AndroidAµLunchFaû
:

61 
	`DBG
("AndroidAppLunchFail\n");

62 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
ö°Æl
.
jpg
));

64 
Devi˚OfÊöe
:

65 
	`DBG
("DeviceOffline\n");

66 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
öô
.
jpg
));

68 
AndroidPlugoutWhíIn°Ælög
:

69 
	`DBG
("AndroidPlugoutWhenInstalling\n");

70 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
öô
.
jpg
));

72 
IosPlugIn
:

73 
	`DBG
("IosPlugIn\n");

74 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
c⁄√˘ög
.
jpg
));

75 
wödow
->
	`show_ecﬁök
();

77 
IosPlugOut
:

78 
	`DBG
("IosPlugOut\n");

79 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
öô
.
jpg
));

81 
IosAµNŸRódy
:

82 
	`DBG
("IosAppNotReady\n");

83 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
hñp
-
ios
.
jpg
));

85 
IosDisc⁄√˘ed
:

86 
	`DBG
("IosDisconnected\n");

88 
IosAµBackground
:

89 
	`DBG
("IosAppBackground\n");

90 
	`g°ªamî_∑u£
();

91 
	`g°ªamî_ªÀa£
();

92 
wödow
->
	`∑öt_image
(
	`FULL_PATH
(
backgroundtù
.
jpg
));

93 
wödow
->
	`show_ecﬁök
();

95 
AµF‹eground
:

96 
	`DBG
("AppForeground\n");

97 if(
	`g°ªamî_gë_°©us
(Ë!
PLAYING
){

98 
	`g°ªamî_öô
(0);

99 
	`g°ªamî_∂ay
();

102 
AndroidS¸ìnOn
:

103 
	`DBG
("AndroidScreenOn\n");

105 
AndroidS¸ìnOff
:

106 
	`DBG
("AndroidScreenOff\n");

108 
AndroidAµBackground
:

109 
	`DBG
("AndroidAppBackground\n");

111 
AndroidDisc⁄√˘ed
:

112 
	`DBG
("AndroidDisconnected\n");

114 
AndroidC⁄√˘ed
:

115 
	`DBG
("AndroidConnected\n");

118 
	`DBG
("nŸ deföed sèã sà%d\n",*
°
);

121 
	}
}

123 
	$d©a_gŸãn
(* 
mode
 ,c⁄° * 
buf„r
, * 
size
)

126 
	`gë_°óm_d©a_cb
(
buf„r
,
size
);

127 
	}
}

	@demo.h

8 #i‚de‡
__DEMO_H


9 
	#__DEMO_H


	)

10 
c⁄√˘
();

11 
disc⁄√˘
();

12 
°_ch™ged
(* 
°
);

13 
d©a_gŸãn
(* 
mode
 ,c⁄° * 
buf„r
, * 
size
);

	@jpegdecode.cpp

8 #i‚de‡
_JPEG_DECODE_C


9 
	#_JPEG_DECODE_C


	)

11 
	~"j≥gdecode.h
"

13 
	~"debug.h
"

15 
	gCJ≥gDecode
::
	$CJ≥gDecode
()

17 
m_rgb_±r
 = 
NULL
;

18 
	`mem£t
(&
m_cöfo
,0,(m_cinfo));

19 
	}
}

21 
	gCJ≥gDecode
::~
	$CJ≥gDecode
()

23 
m_rgb_±r
 = 
NULL
;

24 
	`mem£t
(&
m_cöfo
,0,(m_cinfo));

25 
	}
}

29 
	gCJ≥gDecode
::
	$decode_öô
()

32 
	}
}

34 
	gCJ≥gDecode
::
	$decode_‰om_fûe
(c⁄° * 
∑th
)

36 
height
,
width
,
Àvñ
;

37 
FILE
 *
Â
 = 
NULL
;

38 if((
Â
 = 
	`f›í
(
∑th
,"rb")Ë=
NULL
) {

39 
	`DBG
("îr‹:›í %†Áûed \n",
∑th
);

42 
m_cöfo
.
îr
=
	`j≥g_°d_îr‹
(&
m_jîr
);

43 
	`j≥g_Cª©eDecom¥ess
(&
m_cöfo
,70,(
j≥g_decom¥ess_°ru˘
));

44 
	`j≥g_°dio_§c
(&
m_cöfo
, 
Â
);

45 
	`j≥g_ªad_hódî
(&
m_cöfo
, 
TRUE
);

46 
m_cöfo
.
out_cﬁ‹_•a˚
 = 
JCS_EXT_BGRA
;

47 
	`j≥g_°¨t_decom¥ess
(&
m_cöfo
);

48 
height
 = 
m_cöfo
.
ouçut_height
;

49 
width
 = 
m_cöfo
.
ouçut_width
;

50 
Àvñ
 = 
m_cöfo
.
ouçut_comp⁄íts
;

51 
m_size
 = 
m_cöfo
.
ouçut_width
 * m_cöfo.
ouçut_comp⁄íts
 *m_cöfo.
ouçut_height
;

52 
	`DBG
("decodêmem width = %d ,heighà%d , ouçut_comp⁄ít†%d\n",
width
,
height
,
Àvñ
);

53 if((
m_rgb_±r
 = (*)
	`mÆloc
(
m_size
)) <= 0) {

54 
	`DBG
("decode mallocÉrror\n");

57 
y
 = 0;

58 
m_cöfo
.
ouçut_sˇ∆öe
 < 
height
) {

59 
	`j≥g_ªad_sˇ∆öes
(&
m_cöfo
, &
m_rgb_±r
 + 
y
 * 
height
 * 
Àvñ


61 
y
++;

66 
	}
}

68 
	gCJ≥gDecode
::
	$ªÀa£_rgb_buf„r
()

70 if(
m_rgb_±r
) {

71 
	`‰ì
(
m_rgb_±r
);

72 
m_rgb_±r
 = 
NULL
;

75 
	}
}

77 
	gCJ≥gDecode
::
	$decode_‰om_mem
(c⁄° * 
mem_±r
, 
size
)

79 
height
,
width
,
Àvñ
;

80 
m_cöfo
.
îr
=
	`j≥g_°d_îr‹
(&
m_jîr
);

81 
	`j≥g_Cª©eDecom¥ess
(&
m_cöfo
,70,(
j≥g_decom¥ess_°ru˘
));

82 
	`j≥g_mem_§c
(&
m_cöfo
,
mem_±r
,
size
);

83 
	`j≥g_ªad_hódî
(&
m_cöfo
, 
TRUE
);

84 
m_cöfo
.
out_cﬁ‹_•a˚
 = 
JCS_EXT_RGBA
;

85 
	`j≥g_°¨t_decom¥ess
(&
m_cöfo
);

86 
height
 = 
m_cöfo
.
ouçut_height
;

87 
width
 = 
m_cöfo
.
ouçut_width
;

88 
Àvñ
 = 
m_cöfo
.
ouçut_comp⁄íts
;

89 
m_size
 = 
height
 * 
width
 * 
Àvñ
;

90 if((
m_rgb_±r
 = (*)
	`mÆloc
(
m_size
)) <= 0) {

91 
	`DBG
("decode mallocÉrror\n");

94 
y
 = 0;

95 
m_cöfo
.
ouçut_sˇ∆öe
 < 
height
) {

97 
	`j≥g_ªad_sˇ∆öes
(&
m_cöfo
, &
m_rgb_±r
, 1);

98 
m_rgb_±r
 +
width
 * 
Àvñ
;

99 
y
++;

102 
m_rgb_±r
 -
m_size
;

106 
	}
}

	@jpegdecode.h

8 #i‚de‡
_JPEG_DECODE_H


9 
	#_JPEG_DECODE_H


	)

11 
	~<QImage
>

12 
	~<QPixm≠
>

13 
	~"/u§/loˇl/libj≥g-turbo-1.4.2/‰ìsˇÀ/ö˛ude/j≥glib.h
"

15 
usög
 
«me•a˚
 
	g°d
;

16 ˛as†
	cCJ≥gDecode


18 
	mpublic
:

19 
CJ≥gDecode
();

20 ~
CJ≥gDecode
();

21 
decode_öô
();

22 
decode_‰om_fûe
(c⁄° * 
∑th
);

23 
decode_‰om_mem
(c⁄° * 
mem_±r
, 
size
);

24 
ªÀa£_rgb_buf„r
();

25 * 
	mm_rgb_±r
;

26 
	mm_size
;

27 
	m¥iv©e
:

28 
j≥g_îr‹_mgr
 
m_jîr
;

29 
j≥g_decom¥ess_°ru˘
 
	mm_cöfo
;

30 
	m¥Ÿe˘ed
:

	@main.cpp

1 
	~<QAµliˇti⁄
>

3 
	~"maöwödow.h
"

4 
	~"debug.h
"

6 
	~"°ªam.h
"

7 
	~"sdk.h
"

8 
	~"demo.h
"

11 
MaöWödow
 * 
	gwödow
;

20 
	$maö
(
¨gc
, *
¨gv
[])

22 
QAµliˇti⁄
 
	`≠p
(
¨gc
, 
¨gv
);

23 
MaöWödow
 
w
;

24 
wödow
 = &
w
;

28 
wödow
->
m_rbuf
.
	`£t_maöwödow_±r
(&
w
);

29 
wödow
->
m_rbuf
.
	`öô
();

30 
wödow
->
	`show
();

34 
ECOLINK_CFG
 
cfg
;

35 
cfg
.
lök_c⁄√˘ed_cb
 = 
c⁄√˘
;

36 
cfg
.
lök_disc⁄√˘ed_cb
 = 
disc⁄√˘
;

37 
cfg
.
lök_°©us_ch™ged_cb

°_ch™ged
;

38 
cfg
.
lök_ph⁄e_s¸ìn_d©a_cb

d©a_gŸãn
;

42 
cfg
.
sc_ba£_x
 = 0;

43 
cfg
.
sc_ba£_y
 = 40;

47 
cfg
.
sc_width
= 1280;

48 
cfg
.
sc_height
= 720;

53 if(
	`öô_lök
(&
cfg
))

54 
	`exô
(-1);

58 if(
	`öô_touchevít
("/dev/input/touchscreen0"))

59 
	`exô
(-1);

61 
	`DBG
("qt5Écolink start\n");

63  
≠p
.
	`exec
();

64 
	}
}

	@mainwindow.cpp

1 
	~"maöwödow.h
"

2 
	~"ui_maöwödow.h
"

3 
	~"debug.h
"

4 
	~"°ªam.h
"

10 
	~<QImage
>

12 
	~<uni°d.h
>

18 
	gMaöWödow
::
	$gl_døw_image
()

20 
∑th
[128] = {'\0'};

22 
num
 = (
cou¡
++ % 9) + 1;

23 
	`•rötf
(
∑th
,"/u§/≠p/ªs/images/koko/koko%d.jpg",
num
);

24 
QImage
 
image
;

25 
image
.
	`lﬂd
(
∑th
);

27 
	}
}

31 
	gMaöWödow
::
	$qt_døw_image
()

33 
∑th
[128] = {'\0'};

35 
num
 = (
cou¡
++ % 9) + 1;

36 
	`•rötf
(
∑th
,"/u§/≠p/ªs/images/koko/koko%d.jpg",
num
);

39 
QPixm≠
 
pixm≠
;

40 
pixm≠
.
	`lﬂd
(
∑th
);

41 
pixm≠
 =Öixm≠.
	`sˇÀd
(1280,800);

42 
this
->
ui
->
œbñ
->
	`£tPixm≠
(
pixm≠
);

45 
this
->
ui
->
œbñ
->
	`£tPixm≠
(
	`QPixm≠
(
∑th
));

49 if(!(
cou¡
 % 50)) {

50 
this
->
	`hide
();

52 if(!(
cou¡
 % 100)) {

53 
this
->
	`show
();

56 
	}
}

58 
	gMaöWödow
::
	$MaöWödow
(
QWidgë
 *
∑ª¡
) :

59 
	`QMaöWödow
(
∑ª¡
),

60 
	$ui
(
√w
 
Ui
::
MaöWödow
)

63 
cou¡
 = 1;

64 
timî
 = 
√w
 
	`QTimî
(
this
);

65 
cur_pos
 = 
√w
 
	`QPoöt
();

66 
ui
->
	`£tupUi
(
this
);

68 
	`£tWödowFœgs
(
Qt
::
FømñessWödowHöt
 | Qt::
WödowSèysOnT›Höt
);

70 
	`£tAutoFûlBackground
(
åue
);

71 
QPÆëã
 
∑Àâe
;

77 
this
->
	`∑öt_image
(
	`FULL_PATH
(
öô
.
jpg
));

79 
	}
}

81 
	gMaöWödow
::~
	$MaöWödow
()

83 
dñëe
 
ui
;

84 
	}
}

92 
	gMaöWödow
::
	$∑ötEvít
(
QPaötEvít
 *
evít
)

98 
	}
}

103 
MaöWödow
::
	$mou£PªssEvít
(
QMou£Evít
 *
evít
)

105 *
cur_pos
 = 
evít
->
	`pos
();

107 
x
 = 
cur_pos
->
	`x
();

108 
y
 = 
cur_pos
->
	`y
();

109 
	}
}

114 
	gMaöWödow
::
	$mou£MoveEvít
(
QMou£Evít
 *
evít
)

116 *
cur_pos
 = 
evít
->
	`pos
();

118 
x
 = 
cur_pos
->
	`x
();

119 
y
 = 
cur_pos
->
	`y
();

120 
	}
}

122 
	gMaöWödow
::
	$mou£Rñó£Evít
(
QMou£Evít
 *
evít
)

124 *
cur_pos
 = 
evít
->
	`pos
();

126 
x
 = 
cur_pos
->
	`x
();

127 
y
 = 
cur_pos
->
	`y
();

128 
	}
}

130 
	gMaöWödow
::
	$°¨t_gë_image
()

133 
	}
}

135 
MaöWödow
::
	$°›_gë_image
()

137 
	}
}

139 
MaöWödow
::
	$show_ecﬁök
()

141 
this
->
	`show
();

142 
	}
}

143 
	gMaöWödow
::
	$hide_ecﬁök
()

145 
this
->
	`hide
();

146 
	}
}

148 
	gMaöWödow
::
	$∑öt_image
(c⁄° * 
fûe
)

151 
ui
->
œbñ
->
	`£tPixm≠
(
	`QPixm≠
(
fûe
));

153 
	}
}

155 
	gMaöWödow
::
	$∑öt_image
(
mode
 ,* 
mem
, 
size
)

157 
i
 =0;

158 
fd
;

159 
f‹m©
;

160 
ªt
;

161 
mode
 = 0;

162 
i
++;

163 
mode
) {

165 if–
i
 & 1) {

166 
m_pix
.
	`lﬂdFromD©a
(
mem
,
size
,"JPG");

169 if(
m_pix
.
	`width
() == 1280) {

170 
ui
->
œbñ
->
	`£tPixm≠
(
m_pix
);

171 
ui
->
œbñ
->
	`£tGeomëry
(0,0,1280,800);

173 } if(
m_pix
.
	`width
() == 400) {

174 
ui
->
œbñ
->
	`£tPixm≠
(
m_pix
);

175 
ui
->
œbñ
->
	`£tGeomëry
((1280-400)/2,0,(1280-400)/2,800);

176 
	`u¶ìp
(20000);

179 
m_pix1
.
	`lﬂdFromD©a
(
mem
,
size
,"JPG");

182 if(
m_pix1
.
	`width
() == 1280) {

183 
ui
->
œbñ
->
	`£tPixm≠
(
m_pix1
);

184 
ui
->
œbñ
->
	`£tGeomëry
(0,0,1280,800);

186 } if(
m_pix1
.
	`width
() == 400) {

187 
ui
->
œbñ
->
	`£tPixm≠
(
m_pix1
);

188 
ui
->
œbñ
->
	`£tGeomëry
((1280-400)/2,0,(1280-400)/2,800);

189 
	`u¶ìp
(20000);

194 
f‹m©
 = 
QImage
::
F‹m©_RGBA8888
;

195 
ªt
 = 
m_rbuf
.
m_decodî
.
	`decode_‰om_mem
(
mem
,
size
);

196 
	`DBG
("w = %d h = %d \n",
m_pix
.
	`width
(),m_pix.
	`height
());

197 if(
m_pix
.
	`width
() == 1280) {

198 
m_im
 = 
	`QImage
(
m_rbuf
.
m_decodî
.
m_rgb_±r
,

202 (
QImage
::
F‹m©
)
f‹m©
);

203 
m_pix
 = 
QPixm≠
::
	`‰omImage
(
m_im
);

204 
ui
->
œbñ
->
	`£tPixm≠
(
m_pix
);

205 
ui
->
œbñ
->
	`£tGeomëry
(0,0,1280,800);

206 
	`u¶ìp
(10000);

207 } if(
m_pix
.
	`width
() == 400) {

208 
m_im
 = 
	`QImage
(
m_rbuf
.
m_decodî
.
m_rgb_±r
,

212 (
QImage
::
F‹m©
)
f‹m©
);

213 
m_pix
 = 
QPixm≠
::
	`‰omImage
(
m_im
);

214 
ui
->
œbñ
->
	`£tPixm≠
(
m_pix
);

215 
ui
->
œbñ
->
	`£tGeomëry
((1280-400)/2,0,(1280-400)/2,800);

216 
	`u¶ìp
(20000);

218 
m_rbuf
.
m_decodî
.
	`ªÀa£_rgb_buf„r
();

223 
	}
}

	@mainwindow.h

1 #i‚de‡
MAINWINDOW_H


2 
	#MAINWINDOW_H


	)

4 
	~<QMaöWödow
>

5 
	~<QLabñ
>

6 
	~<QPixm≠
>

7 
	~<QImage
>

8 
	~<QPaöãr
>

9 
	~<QTimî
>

10 
	~<QMou£Evít
>

12 
	~"rögbuf„r.h
"

14 
	#FULL_PATH
(
fûíame
Ë"/u§/≠p/ªs/À/images/"#fûíame""

	)

16 
«me•a˚
 
	gUi


18 
˛ass
 
	gMaöWödow
;

21 ˛as†
	cMaöWödow
 : 
public
 
QMaöWödow


23 
Q_OBJECT


25 
public
:

26 
CRögBuf
 
m_rbuf
;

27 
	mcou¡
;

28 
QTimî
 *
	mtimî
;

29 
QPoöt
 *
	mcur_pos
;

30 
QPixm≠
 
	mm_pix
;

31 
QPixm≠
 
	mm_pix1
;

32 
QImage
 
	mm_im
;

36 
ex∂icô
 
MaöWödow
(
QWidgë
 *
∑ª¡
 = 0);

37 ~
MaöWödow
();

38 
∑öt_image
(c⁄° * 
fûe
);

39 
∑öt_image
(
mode
, * 
mem
 , 
size
);

40 
°¨t_gë_image
();

41 
°›_gë_image
();

42 
°›_decode_∑öt
();

43 
show_ecﬁök
();

44 
hide_ecﬁök
();

45 
gë_múr‹_°©us
();

46 
£t_múr‹_°©us
(
Êag
);

47 
¥iv©e
 
	m¶Ÿs
:

49 
qt_døw_image
();

50 
gl_døw_image
();

52 
	m¥iv©e
:

53 
Ui
::
MaöWödow
 *
ui
;

54 
thªad_c⁄sume
(* 
pd©a
);

55 
	m¥Ÿe˘ed
:

56 
∑ötEvít
(
QPaötEvít
 *
evít
);

57 
mou£PªssEvít
(
QMou£Evít
 *
evít
);

58 
mou£MoveEvít
(
QMou£Evít
 *
evít
);

59 
mou£Rñó£Evít
(
QMou£Evít
 *
evít
);

	@moc_mainwindow.cpp

9 
	~"maöwödow.h
"

10 
	~<QtC‹e/qbyã¨øy.h
>

11 
	~<QtC‹e/qmë©y≥.h
>

12 #i‡!
deföed
(
Q_MOC_OUTPUT_REVISION
)

14 #ñi‡
Q_MOC_OUTPUT_REVISION
 != 67

20 
QT_BEGIN_MOC_NAMESPACE


21 
	sqt_mëa_°rögd©a_MaöWödow_t
 {

22 
QByãAºayD©a
 
	md©a
[4];

23 
	m°rögd©a0
[40];

25 
	#QT_MOC_LITERAL
(
idx
, 
ofs
, 
Àn
) \

26 
	`Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET
(
Àn
, \

27 
	`q±rdiff
(
	`off£tof
(
qt_mëa_°rögd©a_MaöWödow_t
, 
°rögd©a0
Ë+ 
ofs
 \

28 - 
idx
 * (
QByãAºayD©a
)) \

29 )

	)

30 c⁄° 
qt_mëa_°rögd©a_MaöWödow_t
 
	gqt_mëa_°rögd©a_MaöWödow
 = {

32 
QT_MOC_LITERAL
(0, 0, 10),

33 
QT_MOC_LITERAL
(1, 11, 13),

34 
QT_MOC_LITERAL
(2, 25, 0),

35 
QT_MOC_LITERAL
(3, 26, 13)

40 #unde‡
QT_MOC_LITERAL


42 c⁄° 
uöt
 
	gqt_mëa_d©a_MaöWödow
[] = {

60 
QMëaTy≥
::
Void
,

61 
QMëaTy≥
::
Void
,

66 
	gMaöWödow
::
	$qt_°©ic_mëaˇŒ
(
QObje˘
 *
_o
, 
QMëaObje˘
::
CÆl
 
_c
, 
_id
, **
_a
)

68 i‡(
_c
 =
QMëaObje˘
::
InvokeMëaMëhod
) {

69 
MaöWödow
 *
_t
 = 
°©ic_ˇ°
<MaöWödow *>(
_o
);

70 
	`Q_UNUSED
(
_t
)

71 
_id
) {

72 0: 
_t
->
	`qt_døw_image
(); ;

73 1: 
_t
->
	`gl_døw_image
(); ;

77 
	`Q_UNUSED
(
_a
);

78 
	}
}

80 c⁄° 
QMëaObje˘
 
	gMaöWödow
::
°©icMëaObje˘
 = {

81 { &
QMaöWödow
::
°©icMëaObje˘
, 
qt_mëa_°rögd©a_MaöWödow
.
d©a
,

82 
qt_mëa_d©a_MaöWödow
, 
qt_°©ic_mëaˇŒ
, 
Q_NULLPTR
, Q_NULLPTR}

86 c⁄° 
QMëaObje˘
 *
	gMaöWödow
::
	$mëaObje˘
() const

88  
QObje˘
::
d_±r
->
mëaObje˘
 ? QObje˘::d_±r->
	`dy«micMëaObje˘
(Ë: &
°©icMëaObje˘
;

89 
	}
}

91 *
	gMaöWödow
::
	$qt_mëaˇ°
(c⁄° *
_˛«me
)

93 i‡(!
_˛«me
Ë 
Q_NULLPTR
;

94 i‡(!
	`°rcmp
(
_˛«me
, 
qt_mëa_°rögd©a_MaöWödow
.
°rögd©a0
))

95  
°©ic_ˇ°
<*>(
c⁄°_ˇ°
< 
MaöWödow
*>(
this
));

96  
QMaöWödow
::
	`qt_mëaˇ°
(
_˛«me
);

97 
	}
}

99 
	gMaöWödow
::
	$qt_mëaˇŒ
(
QMëaObje˘
::
CÆl
 
_c
, 
_id
, **
_a
)

101 
_id
 = 
QMaöWödow
::
	`qt_mëaˇŒ
(
_c
, _id, 
_a
);

102 i‡(
_id
 < 0)

103  
_id
;

104 i‡(
_c
 =
QMëaObje˘
::
InvokeMëaMëhod
) {

105 i‡(
_id
 < 2)

106 
	`qt_°©ic_mëaˇŒ
(
this
, 
_c
, 
_id
, 
_a
);

107 
_id
 -= 2;

108 } i‡(
_c
 =
QMëaObje˘
::
Regi°îMëhodArgumítMëaTy≥
) {

109 i‡(
_id
 < 2)

110 *
ªöãΩªt_ˇ°
<*>(
_a
[0]) = -1;

111 
_id
 -= 2;

113  
_id
;

114 
	}
}

115 
	gQT_END_MOC_NAMESPACE


	@ringbuffer.cpp

8 #i‚de‡
__RING_BUFFER_C


9 
	#__RING_BUFFER_C


	)

12 
	~"debug.h
"

13 
	~"rögbuf„r.h
"

14 
	~"maöwödow.h
"

15 
	~<±hªad.h
>

16 
	~<uni°d.h
>

19 
	#is_powî_of_2
(
x
Ë((xË!0 && (((xË& ((xË- 1)Ë=0))

	)

20 
	#mö
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

27 
	gCRögBuf
::
	$rög_buf„r_‰ì
(
rög_buf„r
 *
rög_buf
)

29 i‡(
rög_buf
) {

30 i‡(
rög_buf
->
buf„r
) {

31 
	`‰ì
(
rög_buf
->
buf„r
);

33 
	`‰ì
(
rög_buf
);

34 
rög_buf
 = 
NULL
;

36 
	}
}

38 * 
	gCRögBuf
::
	$thªad_c⁄sume
(* 
pd©a
)

41 
m_wö
->
m_rbuf
.
	`rög_buf„r_gë
();

43 
	}
}

45 
	gCRögBuf
::
	$£t_maöwödow_±r
(
MaöWödow
 * 
w
)

47 
m_wö
 = 
w
;

48 
	}
}

50 
	gCRögBuf
::
	$CRögBuf
()

52 
lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

53 
c⁄d
 = 
PTHREAD_COND_INITIALIZER
;

54 
buf_±r
 = 
NULL
;

55 
m_wö
 = 
NULL
;

56 
	}
}

59 
	gCRögBuf
::~
	$CRögBuf
()

61 
	`rög_buf„r_‰ì
(
buf_±r
);

62 
buf_±r
 = 
NULL
;

63 
m_wö
 = 
NULL
;

64 
	}
}

66 
	gCRögBuf
::
	$__rög_buf„r_Àn
(c⁄° 
rög_buf„r
 * 
rög_buf
)

68  (
rög_buf
->
ö
 -Ñög_buf->
out
);

69 
	}
}

75 
	gCRögBuf
::
	$rög_buf„r_Àn
(c⁄° 
rög_buf„r
 *
rög_buf
)

77 
Àn
 = 0;

78 
	`±hªad_muãx_lock
(&
lock
);

79 
Àn
 = 
	`__rög_buf„r_Àn
(
rög_buf
);

80 
	`±hªad_muãx_u∆ock
(&
lock
);

81  
Àn
;

82 
	}
}

90 
	gCRögBuf
::
	$rög_buf„r_put_1
(* 
buf„r
, 
buf„rsize
)

92 
ªt
 = -1;

93 
Àn
 = 0;

94 
ªcv_Àn
 = 0;

96 
	`±hªad_muãx_lock
(&
lock
);

97 
size
 = 
	`mö
(1, 
buf_±r
->sizê- (buf_±r->
ö
 - buf_±r->
out
));

98 if(
size
 == 0) {

101 
	`±hªad_c⁄d_waô
(&
c⁄d
,&
lock
);

102 
size
 = (
buf_±r
->sizê- (buf_±r->
ö
 - buf_±r->
out
));

107 
	`±hªad_muãx_u∆ock
(&
lock
);

109 
	`mem˝y
(
buf_±r
->
buf„r
 + (buf_±r->
ö
 & (buf_±r->
size
 - 1)), buf„r, 
buf„rsize
);

110 
buf_±r
->
avÆuabÀ_Àngth_ö_buf„r
[buf_±r->
ö
 & (buf_±r->
size
 - 1)] = 
buf„rsize
;

111 
buf_±r
->
ö
 +
size
;

114 
	`±hªad_c⁄d_sig«l
(&
c⁄d
);

117 
	}
}

119 
	gCRögBuf
::
	$rög_buf„r_gë
()

121 
	`±hªad_muãx_lock
(&
lock
);

122 
size
 = 
	`mö
(1, 
buf_±r
->
ö
 - buf_±r->
out
);

123 if(
size
 == 0) {

126 
	`±hªad_c⁄d_waô
(&
c⁄d
,&
lock
);

127 
size
 = 
	`mö
(1, 
buf_±r
->
ö
 - buf_±r->
out
);

133 
	`±hªad_muãx_u∆ock
(&
lock
);

135 
	`fun
(
image_di•œy_is_√ed
,

136 
NULL
,

137 (c⁄° *)(
buf_±r
->
buf„r
 + (buf_±r->
out
 & (buf_±r->
size
 - 1))),

138 
buf_±r
->
avÆuabÀ_Àngth_ö_buf„r
[buf_±r->
out
 & (buf_±r->
size
 - 1)]);

139 
buf_±r
->
out
 +=
size
;

143 
m_wö
->
	`∑öt_image
(0,(*)(
buf_±r
->
buf„r
 + (buf_±r->
out
 & (buf_±r->
size
 - 1))),buf_±r->
avÆuabÀ_Àngth_ö_buf„r
[buf_ptr->out & (buf_ptr->size - 1)]);

145 
	`±hªad_c⁄d_sig«l
(&
c⁄d
);

148 
	}
}

150 
	gCRögBuf
::
	$öô
()

152 
buf_±r
 = (
rög_buf„r
 *)
	`mÆloc
((ring_buffer));

153 if(
buf_±r
 =
NULL
) {

157 
	`mem£t
(
buf_±r
,0,(
rög_buf„r
));

158 
buf_±r
->
buf„r
 = ((*)[
BUFFFER_SIZE
])
	`mÆloc
(BUFFFER_SIZE * 
RING_DEPTH
);

159 if(
buf_±r
->
buf„r
 =
NULL
) {

160 
	`DBG
("buffer mallocÉrror\n");

163 
buf_±r
->
size
 = 
RING_DEPTH
;

164 
buf_±r
->
ö
 = 0;

165 
buf_±r
->
out
 = 0;

167 
±hªad_t
 
pid
;

168 
ªt
;

169 
ªt
 = 
	`±hªad_¸óã
(&
pid
, 
NULL
, (*)&
CRögBuf
::
thªad_c⁄sume
, NULL);

170 if(
ªt
 != 0) {

171 
	`DBG
("thread_consume createÉrror\n");

177 
	}
}

	@ringbuffer.h

9 #i‚de‡
__RING_BUF_H


10 
	#__RING_BUF_H


	)

13 
	~"j≥gdecode.h
"

18 
	#BUFFFER_SIZE
 500*1024

	)

19 
	#RING_DEPTH
 2

	)

21 
	srög_buf„r
 {

23 (*
	mbuf„r
)[
BUFFFER_SIZE
];

24 
	mavÆuabÀ_Àngth_ö_buf„r
[
RING_DEPTH
];

25 
	msize
;

26 
	mö
;

27 
	mout
;

28 } 
	trög_buf„r
;

31 (*
	tu£_image_d©a_‰om_buf„r
)(const *,);

33 
˛ass
 
MaöWödow
;

35 ˛as†
	cCRögBuf


38 
public
:

39 
	`CRögBuf
();

40 ~
	`CRögBuf
();

41 
	`rög_buf„r_‰ì
(
rög_buf„r
 *
rög_buf
);

42 
	`öô
();

43 
	`rög_buf„r_Àn
(c⁄° 
rög_buf„r
 *
rög_buf
);

44 
	`rög_buf„r_put_1
(* 
buf„r
, 
buf„rsize
);

45 
	`rög_buf„r_gë
();

46 
	`£t_maöwödow_±r
(
MaöWödow
* 
w
);

47 
rög_buf„r
* 
buf_±r
 ;

48 
CJ≥gDecode
 
m_decodî
;

49 
¥iv©e
:

50 
MaöWödow
 * 
m_wö
;

51 
	`__rög_buf„r_Àn
(c⁄° 
rög_buf„r
 * 
rög_buf
);

52 * 
	`thªad_c⁄sume
(* 
pd©a
);

53 
±hªad_muãx_t
 
lock
 ;

54 
±hªad_c⁄d_t
 
c⁄d
 ;

	@sdk.h

8 #i‚de‡
__ECOLINK_SDK_H


9 
	#__ECOLINK_SDK_H


	)

12 
	#IN


	)

13 
	#OUT


	)

14 
	#NULL
 0

	)

16 #ifde‡
__˝lu•lus


25 
Devi˚OfÊöe
 = 0,

30 
AndroidO∆öe
,

35 
AndroidAµLunchFaû
,

40 
AndroidPlugoutWhíIn°Ælög
 = 3,

45 
AndroidAdbNŸO≥√d
,

50 
AndroidS¸ìnOff
,

55 
AndroidS¸ìnOn
 = 6,

61 
AµF‹eground
,

66 
AndroidAµBackground
,

71 
AndroidC⁄√˘ed
,

76 
AndroidDisc⁄√˘ed
 = 10,

81 
IosPlugIn
,

86 
IosPlugOut
,

93 
IosAµBackground
 = 13,

98 
IosAµNŸRódy
,

103 
IosC⁄√˘ed
,

108 
IosDisc⁄√˘ed
 = 16,

111 
Re£rved
,

113 }
	tECOLINK_ST
;

117 
JPEG
 = 0,

118 
STREAM
,

119 }
	tECOLINK_MODE
;

124 (*
lök_c⁄√˘ed_cb
)();

125 (*
lök_disc⁄√˘ed_cb
)();

126 (*
lök_°©us_ch™ged_cb
)(
OUT
 * 
°©us
);

127 (*
lök_ph⁄e_s¸ìn_d©a_cb
)(
OUT
 * 
mode
 ,OUT c⁄° * 
buf„r
, OUT * 
size
);

128 
võw_ba£_x
;

129 
võw_ba£_y
;

130 
võw_width
;

131 
võw_height
;

132 
sc_width
;

133 
sc_height
;

134 } 
	tECOLINK_CFG
;

142 
quîy_sdk_vîsi⁄
(* 
vîsi⁄
);

148 
öô_lök
(
IN
 
ECOLINK_CFG
* 
cb
);

154 
ªÀa£_lök
();

160 
gë_lök_°©us
();

165 
íabÀ_lök_å™s„r
();

171 
dißbÀ_lök_å™s„r
();

177 
gë_lök_å™s„r_°©us
();

184 
öô_touchevít
(c⁄° * 
dev
);

189 
íabÀ_touchevít
();

194 
dißbÀ_touchevít
();

196 #ifde‡
__˝lu•lus


	@stream.cpp

1 #i‚de‡
_STREAM_PLAY_CPP


2 
	#_STREAM_PLAY_CPP


	)

4 
	~"°ªam.h
"

5 
	~"debug.h
"

12 
	g°©e
 = 
NULLSTATE
;

13 
±hªad_muãx_t
 
	glock
 = 
PTHREAD_MUTEX_INITIALIZER
 ;

14 
guöt
 
	gsour˚_id
 = 0;

15 
GMaöLo›
 * 
	glo›
;

16 
G°AµSrc
* 
	g§c
 = 
NULL
;

17 
G°EÀmít
* 
	gpùñöe
 = 
NULL
;

22 
	$°¨t_lo›
(* 
∑ø
)

24 
	`DBG
("%s\n",
__FUNCTION__
);

25 
	`g_ªtu∫_if_Áû
(
NULL
 !
lo›
);

26 
	`g_maö_lo›_run
(
lo›
);

27 if(
°©e
 !
NULLSTATE
){

28 
	`DBG
("exitÜooping\n");

29 
	`g°_ñemít_£t_°©e
 (
pùñöe
, 
GST_STATE_NULL
);

30 
	`g°_obje˘_uƒef
(
	`GST_OBJECT
(
pùñöe
));

31 
	`g_maö_lo›_uƒef
(
lo›
);

34 
	}
}

41 
	$g°ªamî_gë_°©us
(){

42  
°©e
;

43 
	}
}

45 
	$g°ªamî_°¨t_lo›
()

47 
GThªad
 * 
thªad
 = 
	`g_thªad_√w
("lo›", (
GThªadFunc
)
°¨t_lo›
, 
NULL
);

48 
	}
}

51 
	$g°ªamî_∂ay
()

54 if(
pùñöe
)

55 
	`g°_ñemít_£t_°©e
 (
pùñöe
, 
GST_STATE_PLAYING
);

56 
°©e
 = 
PLAYING
;

57 
	}
}

60 
	$g°ªamî_∑u£
()

62 if(
pùñöe
){

63 
	`g°_ñemít_£t_°©e
 (
pùñöe
, 
GST_STATE_PAUSED
);

65 
°©e
 = 
PAUSED
;

67 
	}
}

70 
	$g°ªamî_ªÀa£
()

72 
	`DBG
("%s\n",
__FUNCTION__
);

73 
°©e
 = 
NULLSTATE
;

74 if(
pùñöe
)

75 
	`g°_ñemít_£t_°©e
 (
pùñöe
, 
GST_STATE_NULL
);

77 
	`g_maö_lo›_quô
(
lo›
);

79 
	}
}

89 
	$push_ö
(* 
d©a
 ,
Àngth
,
±hªad_muãx_t
* 
lock
){

94 
G°FlowRëu∫
 
sig«l_°©us
;

95 
G°Buf„r
* 
buf„r
;

96 
guöt8
 *
±r
 = (guöt8 *)
	`g_mÆloc
(
Àngth
);

97 
	`g_as£π
(
±r
);

98 
	`mem˝y
(
±r
,
d©a
,
Àngth
);

99 
buf„r
 = 
	`g°_buf„r_√w
();

100 
	`g°_buf„r_≠≥nd_mem‹y
(
buf„r
,

101 
	`g°_mem‹y_√w_wøµed
(

102 
GST_MEMORY_FLAG_PHYSICALLY_CONTIGUOUS
,

103 
±r
, 
Àngth
, 0,Üígth,Öå, 
g_‰ì
));

104 
	`g_sig«l_emô_by_«me
(
§c
, "push-buf„r", 
buf„r
, &
sig«l_°©us
);

106 if(
GST_FLOW_OK
 =
sig«l_°©us
) {

108 
	`g°_buf„r_uƒef
(
buf„r
);

109 
	`±hªad_muãx_u∆ock
(
lock
);

110  
åue
;

112 
	`DBG
("push buf„∏ªtu∫ed %d f‹ %d byã†\n", 
sig«l_°©us
, 
Àngth
);

113 
	`g°_buf„r_uƒef
(
buf„r
);

114 
	`±hªad_muãx_u∆ock
(
lock
);

115  
Ál£
;

117 
	}
}

124 
	g°ªam_buf
[ 1000 * 1024];

125 
	gbuf„ªd_Àn
 = 0;

126 
	ghas_l⁄g_‰ame_buf„ªd
 = 
FALSE
;

127 
	g°¨t
 = 0;

128 
	g°©us
 = 0;

129 
	eSTATUS
{

130 
	mHAS_START_CODE_f
,

131 
	mHAS_START_CODE_s
,

132 
	mMORE_DATA
,

133 
	mHAS_FRAME_HEAD


136 
	$gë_°óm_d©a_cb
(*
d©a
, 
Àngth
)

139 if(
°©e
 =
PLAYING
){

140 
	`±hªad_muãx_lock
(&
lock
);

142 
«l_hódî
 = *((*)
d©a
);

143 
	`DUMP_L
(
d©a
,10);

145 
°©us
){

146 
HAS_FRAME_HEAD
:

148 
	`push_ö
(
°ªam_buf
,
buf„ªd_Àn
,&
lock
);

149 
buf„ªd_Àn
 = 0;

151 
°©us
 = 0;

153 
MORE_DATA
:

154 
	`mem˝y
(
°ªam_buf
 + 
buf„ªd_Àn
,
d©a
,
Àngth
);

155 
buf„ªd_Àn
 +
Àngth
;

157 
°©us
 = 
MORE_DATA
;

158 
	`±hªad_muãx_u∆ock
(&
lock
);

163 if(
«l_hódî
 == 0x01000000){

164 if(
d©a
[4] == 0x65 ||

165 
d©a
[4] == 0x41 ||

166 
d©a
[4] == 0x67){

167 
	`mem˝y
(
°ªam_buf
 + 
buf„ªd_Àn
,
d©a
,
Àngth
);

168 
buf„ªd_Àn
 +
Àngth
;

170 
°©us
 = 
HAS_FRAME_HEAD
;

171 
	`±hªad_muãx_u∆ock
(&
lock
);

177 
	`push_ö
(
d©a
,
Àngth
,&
lock
);

181 
	}
}

184 
gboﬁón
 
	$bus_ˇŒback
(
G°Bus
 *
bus
, 
G°Mesßge
 *
msg
, 
gpoöãr
 
d©a
)

186 
	`GST_MESSAGE_TYPE
(
msg
)) {

187 
GST_MESSAGE_EOS
:

188 
	`DBG
("End-of-stream\n");

191 
GST_MESSAGE_ERROR
:

192 
gch¨
 *
debug
;

193 
GEº‹
 *
îr‹
;

195 
	`g°_mesßge_∑r£_îr‹
(
msg
, &
îr‹
, &
debug
);

196 
	`g_‰ì
(
debug
);

198 
	`DBG
("Eº‹: %s\n", 
îr‹
->
mesßge
);

199 
	`g_îr‹_‰ì
(
îr‹
);

205 
GST_MESSAGE_WARNING
: {

206 
gch¨
 *
debug
;

207 
GEº‹
 *
îr
;

209 
	`g°_mesßge_∑r£_w¨nög
(
msg
, &
îr
, &
debug
);

210 
	`g_‰ì
(
debug
);

211 
	`DBG
("MesßgêW¨¿ %d Eº‹: (%s:%dË%s\n", (
göt32
)
îr
->
domaö
, 
	`g_qu¨k_to_°rög
”º->domaö),îr->
code
,Éº->
mesßge
);

212 
	`g_îr‹_‰ì
(
îr
);

216 
GST_MESSAGE_INFO
: {

217 
	`DBG
(" Message Info\n");

220 
GST_MESSAGE_TAG
: {

223 
GST_MESSAGE_STATE_CHANGED
: {

224 
G°Sèã
 
ﬁd_°©e
, 
√w_°©e
;

226 
	`g°_mesßge_∑r£_°©e_ch™ged
(
msg
, &
ﬁd_°©e
, &
√w_°©e
, 
NULL
);

228 
	`DBG
 (" Element %s changed state from %sÅo %s\n",

229 
	`GST_OBJECT_NAME
 (
msg
->
§c
),

230 
	`g°_ñemít_°©e_gë_«me
 (
ﬁd_°©e
),

231 
	`g°_ñemít_°©e_gë_«me
 (
√w_°©e
));

235 
GST_MESSAGE_STEP_DONE
: {

236 
	`DBG
("Message StepDone\n");

239 
GST_MESSAGE_NEW_CLOCK
: {

240 
	`DBG
("Message NewClock\n");

243 
GST_MESSAGE_STREAM_STATUS
: {

244 
G°SåómSètusTy≥
 
ty≥
;

245 
G°EÀmít
 *
ow√r
;

246 
	`g°_mesßge_∑r£_°ªam_°©us
 (
msg
, &
ty≥
, &
ow√r
);

248 
	`DBG
("MesßgêSåómSètu†EÀmíà%†(%d)\n", 
	`GST_OBJECT_NAME
 (
msg
->
§c
), (
göt32
)
ty≥
);

253 
	`DBG
("deÁu…,ty≥ = %d\n",
	`GST_MESSAGE_TYPE
(
msg
));

257  
åue
;

258 
	}
}

260 
	gÀn
 = 0;

261 
	gtŸÆ
 = 0;

262 
FILE
* 
	gÂ
 = 
NULL
 ;

265 
gboﬁón
 
	$gë_°ªam_d©a
(* 
d©a
 , 
Àngth
)

267 
	`DBG
("data from file\n");

268 
‰ame_Àn
 = 1024 * 50;

269 
guöt8
 *
±r
 = (guöt8 *)
	`g_mÆloc
(
‰ame_Àn
);

270 
	`g_as£π
(
±r
);

271 
G°FlowRëu∫
 
sig«l_°©us
;

272 
G°Buf„r
* 
buf„r
;

273 if((
Àn
 = 
	`‰ód
(
±r
,(),
‰ame_Àn
,
Â
)) != 0) {

274 
tŸÆ
 +
Àn
;

276 
buf„r
 = 
	`g°_buf„r_√w
();

277 
	`g°_buf„r_≠≥nd_mem‹y
(
buf„r
,

278 
	`g°_mem‹y_√w_wøµed
(
GST_MEMORY_FLAG_READONLY
, 
±r
, 
Àn
, 0,Üí,Öå, 
g_‰ì
));

279 
	`g_sig«l_emô_by_«me
(
§c
, "push-buf„r", 
buf„r
, &
sig«l_°©us
);

280 if(
GST_FLOW_OK
 =
sig«l_°©us
) {

281 
	`DBG
("push buffer ok\n");

282 
	`g°_buf„r_uƒef
(
buf„r
);

283  
åue
;

285 
	`DBG
("push buf„∏ªtu∫ed %d f‹ %d byã†\n", 
sig«l_°©us
, 
Àn
);

286 
	`g°_buf„r_uƒef
(
buf„r
);

287  
Ál£
;

290 
	}
}

297 
	$°¨t_„ed
(
G°EÀmít
 * 
pùñöe
, 
guöt
 
size
, 
gpoöãr
 
d©a
)

300 #ifde‡
SRC_FROM_FILE


301 i‡(
sour˚_id
 == 0) {

302 
sour˚_id
 = 
	`g_idÀ_add
((
GSour˚Func
)
gë_°ªam_d©a
, 
d©a
);

305 
	}
}

311 
	$°›_„ed
(
G°EÀmít
 * 
pùñöe
, 
gpoöãr
 
d©a
)

313 
guöt64
 
max
 = 
	`g°_≠p_§c_gë_max_byãs
(
§c
);

314 
guöt64
 
cur
 = 
	`g°_≠p_§c_gë_cuºít_Àvñ_byãs
(
§c
);

315 
	`DBG
("w¨¬ög ! såóm d©®fuŒ max=%d cur=%d\n",
max
,
cur
);

316 #ifde‡
SRC_FROM_FILE


317 i‡(
sour˚_id
 != 0) {

318 
	`g_sour˚_ªmove
(
sour˚_id
);

319 
sour˚_id
 = 0;

322 
	}
}

330 
	$g°ªamî_öô
(
√ed_sˇÀ
)

332 
	`DBG
("%s\n",
__FUNCTION__
);

333 
G°Bus
 *
bus
;

334 
G°EÀmít
* 
∑r£r

NULL
;

335 
G°EÀmít
* 
decodî
 = 
NULL
;

336 
G°EÀmít
* 
c⁄vîãr
 = 
NULL
;

337 
G°EÀmít
* 
øã
 = 
NULL
;

338 
G°EÀmít
* 
sˇÀ
 = 
NULL
;

339 
G°EÀmít
* 
fûãr
 = 
NULL
;

340 
G°EÀmít
* 
sök
 = 
NULL
;

341 
GVÆue
 
vÆue
;

343 
	`g°_öô
(
NULL
, NULL);

344 
lo›
 = 
	`g_maö_lo›_√w
(
NULL
,
Ál£
);

347 
pùñöe
 = 
	`g°_pùñöe_√w
("h264-fifo-player");

348 if(!
pùñöe
 ) {

349 
	`DBG
("createÖipelineÉlement fail\n");

351 
§c
 = (
G°AµSrc
 *)
	`g°_ñemít_Á˘‹y_make
("appsrc","src0");

352 if(!
§c
) {

353 
	`DBG
("create src fail\n");

355 
	`g_obje˘_£t
(
	`G_OBJECT
(
§c
), "is-live", 
TRUE
, 
NULL
);

356 
	`g_obje˘_£t
(
	`G_OBJECT
(
§c
), "block", 
TRUE
, 
NULL
);

359 
	`g°_≠p_§c_£t_°ªam_ty≥
(
§c
, 
GST_APP_STREAM_TYPE_STREAM
);

360 
	`g°_≠p_§c_£t_max_byãs
(
§c
,100 * 1024);

365 
∑r£r
 = 
	`g°_ñemít_Á˘‹y_make
("h264parse","parser");

366 if(!
∑r£r
) {

367 
	`DBG
("createÖarser fail\n");

369 
decodî
 = 
	`g°_ñemít_Á˘‹y_make
("ducatih264decvpe","decoder");

370 if(!
decodî
) {

371 
	`DBG
("create decoder fail\n");

374 
c⁄vîãr
 = 
	`g°_ñemít_Á˘‹y_make
("videoconvert","converter");

375 if(!
c⁄vîãr
) {

376 
	`DBG
("create converter fail\n");

379 if(
√ed_sˇÀ
){

380 
øã
 = 
	`g°_ñemít_Á˘‹y_make
("videorate","rate");

381 if(!
øã
) {

382 
	`DBG
("createÑate fail\n");

384 
sˇÀ
 = 
	`g°_ñemít_Á˘‹y_make
("videoscale","scale");

385 if(!
sˇÀ
) {

386 
	`DBG
("create scale fail\n");

388 
fûãr
 = 
	`g°_ñemít_Á˘‹y_make
("capsfilter","filter");

389 if(!
fûãr
) {

390 
	`DBG
("createÑate fail\n");

393 
G°C≠s
 *
ˇps
 = 
	`g°_ˇps_‰om_°rög
 ("video/x-raw,height=800,width=1280");

394 
	`g_obje˘_£t
 (
fûãr
, "ˇps", 
ˇps
, 
NULL
);

397 
sök
 = 
	`g°_ñemít_Á˘‹y_make
("waylandsink","sink");

399 if(!
sök
) {

400 
	`DBG
("create sink fail\n");

403 
	`g_obje˘_£t
(
sök
, "sync", 
Ál£
, "async",Ál£,
NULL
);

405 
ivi_id
 = 101202;

406 
	`mem£t
(&
vÆue
, 0, (
GVÆue
));

407 
	`g_vÆue_öô
(&
vÆue
, 
G_TYPE_INT
);

408 
	`g_vÆue_£t_öt
(&
vÆue
, 
ivi_id
);

409 
	`g_obje˘_£t_¥›îty
(
	`G_OBJECT
(
sök
), "ivi-id", &
vÆue
);

412 
bus
 = 
	`g°_pùñöe_gë_bus
(
	`GST_PIPELINE
(
pùñöe
));

413 
	`g°_bus_add_w©ch
(
bus
, 
bus_ˇŒback
, 
lo›
);

414 
	`g°_obje˘_uƒef
(
bus
);

417 if(
√ed_sˇÀ
){

418 
	`g°_bö_add_m™y
(
	`GST_BIN
(
pùñöe
),(
G°EÀmít
* )
§c
,
∑r£r
,
decodî
,
c⁄vîãr
,
sˇÀ
,
fûãr
,
sök
,
NULL
);

420 if(!
	`g°_ñemít_lök_m™y
((
G°EÀmít
* )
§c
,
∑r£r
,
decodî
,
c⁄vîãr
,
sˇÀ
,
fûãr
,
sök
,
NULL
))

421 
	`DBG
("pipelineÜink fail\n");

423 
	`DBG
("pipelineÜink ok\n");

426 
	`g°_bö_add_m™y
(
	`GST_BIN
(
pùñöe
),(
G°EÀmít
* )
§c
,
∑r£r
,
decodî
,
c⁄vîãr
,
sök
,
NULL
);

428 if(!
	`g°_ñemít_lök_m™y
((
G°EÀmít
* )
§c
,
∑r£r
,
decodî
,
c⁄vîãr
,
sök
,
NULL
))

429 
	`DBG
("pipelineÜink fail\n");

431 
	`DBG
("pipelineÜink ok\n");

435 
	`g_sig«l_c⁄√˘
(
§c
, "√ed-d©a", 
	`G_CALLBACK
(
°¨t_„ed
), (
gpoöãr
)
NULL
);

437 
	`g_sig«l_c⁄√˘
(
§c
, "íough-d©a", 
	`G_CALLBACK
(
°›_„ed
), (
gpoöãr
)
NULL
);

439 
	`g°_ñemít_£t_°©e
(
pùñöe
,
GST_STATE_NULL
);

441 #ifde‡
SRC_FROM_FILE


442 if((
Â
 = 
	`f›í
((*)
∑th
,"rb")Ë=
NULL
) {

443 
	`DBG
("file openÉrror\n");

444 
	`exô
(-1);

449 
	`g_maö_lo›_run
(
lo›
);

450 
°©e
 = 
NULLSTATE
;

456 
	`g°ªamî_°¨t_lo›
();

457 
	`u¶ìp
(100000);

462 
	}
}

465 
	$ovîœy
()

468 
guöt
 
maj‹
, 
mö‹
, 
mi¸o
, 
«no
;

469 
	`g°_öô
 (&
¨gc
, &
¨gv
);

470 
	`g°_vîsi⁄
 (&
maj‹
, &
mö‹
, &
mi¸o
, &
«no
);

471 
	`DBG
("g° vîsi⁄ %d-%d-%d-%d\n",
maj‹
,
mö‹
,
mi¸o
,
«no
);

472 
G°EÀmít
 *
∂aybö
, *
videosök
;

473 
gch¨
 *
uri
;

474 
∂aybö
 = 
	`g°_ñemít_Á˘‹y_make
 ("playbin", "myplaybin");

475 
videosök
 = 
	`g°_ñemít_Á˘‹y_make
 ("waylandsink", "waylandsink0");

476 
	`g_obje˘_£t
 (
∂aybö
, "video-sök", 
videosök
, 
NULL
);

477 
	`g_obje˘_£t
 (
∂aybö
, "uri", "/home/roŸ/ecﬁök-ui/ecﬁök-ui/image/1280x800.h264", 
NULL
);

479 
	`g°_video_ovîœy_£t_wödow_h™dÀ
(
	`GST_VIDEO_OVERLAY
(
videosök
), 
w
.
	`wöId
());

481 
G°SèãCh™geRëu∫
 
§ë
 = 
	`g°_ñemít_£t_°©e
 (
∂aybö
,
GST_STATE_PLAYING
);

484 
	}
}

	@stream.h

1 #i‚de‡
STREAM_PLAY_H


2 
	#STREAM_PLAY_H


	)

10 
	~<sys/ty≥s.h
>

11 
	~<uni°d.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<sys/£À˘.h
>

18 
	~<f˙é.h
>

19 
	~<±hªad.h
>

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

23 
	~<g°/g°.h
>

24 
	~<g°/≠p/g°≠p§c.h
>

28 
	mNULLSTATE
 = 0,

29 
	mINITIALIZED
,

30 
	mPLAYING
,

31 
	mPAUSED
,

32 
	mRELEASED


33 } 
	tPLAYING_STATE
;

37 
g°ªamî_öô
(
√ed_sˇÀ
);

38 
gë_°óm_d©a_cb
(*
d©a
, 
Àngth
);

39 
g°ªamî_∂ay
();

40 
g°ªamî_∑u£
();

41 
g°ªamî_ªÀa£
();

42 
g°ªamî_gë_°©us
();

	@ui_mainwindow.h

9 #i‚de‡
UI_MAINWINDOW_H


10 
	#UI_MAINWINDOW_H


	)

12 
	~<QtC‹e/QV¨ü¡
>

13 
	~<QtWidgës/QA˘i⁄
>

14 
	~<QtWidgës/QAµliˇti⁄
>

15 
	~<QtWidgës/QBuâ⁄Group
>

16 
	~<QtWidgës/QHódîVõw
>

17 
	~<QtWidgës/QLabñ
>

18 
	~<QtWidgës/QMaöWödow
>

19 
	~<QtWidgës/QWidgë
>

21 
QT_BEGIN_NAMESPACE


23 ˛as†
	cUi_MaöWödow


25 
	mpublic
:

26 
QWidgë
 *
˚¡ølWidgë
;

27 
QLabñ
 *
	mœbñ
;

29 
	$£tupUi
(
QMaöWödow
 *
MaöWödow
)

31 i‡(
MaöWödow
->
	`obje˘Name
().
	`isEm±y
())

32 
MaöWödow
->
	`£tObje˘Name
(
	`QSåögLôîÆ
("MainWindow"));

33 
MaöWödow
->
	`ªsize
(1280, 800);

34 
˚¡ølWidgë
 = 
√w
 
	`QWidgë
(
MaöWödow
);

35 
˚¡ølWidgë
->
	`£tObje˘Name
(
	`QSåögLôîÆ
("centralWidget"));

36 
˚¡ølWidgë
->
	`£tC⁄ãxtMíuPﬁicy
(
Qt
::
NoC⁄ãxtMíu
);

37 
œbñ
 = 
√w
 
	`QLabñ
(
˚¡ølWidgë
);

38 
œbñ
->
	`£tObje˘Name
(
	`QSåögLôîÆ
("label"));

39 
œbñ
->
	`£tGeomëry
(
	`QRe˘
(0, 0, 1280, 800));

40 
MaöWödow
->
	`£tCíåÆWidgë
(
˚¡ølWidgë
);

42 
	`ªå™¶©eUi
(
MaöWödow
);

44 
QMëaObje˘
::
	`c⁄√˘SlŸsByName
(
MaöWödow
);

47 
	$ªå™¶©eUi
(
QMaöWödow
 *
MaöWödow
)

49 
MaöWödow
->
	`£tWödowTôÀ
(
QAµliˇti⁄
::
	`å™¶©e
("MainWindow", "MainWindow", 0));

50 
œbñ
->
	`£tText
(
	`QSåög
());

51 
	}
}

55 
«me•a˚
 
	gUi
 {

56 ˛as†
	cMaöWödow
: 
public
 
Ui_MaöWödow
 {};

59 
	gQT_END_NAMESPACE


	@/usr/local/libjpeg-turbo-1.4.2/freescale/include/jpeglib.h

16 #i‚de‡
JPEGLIB_H


17 
	#JPEGLIB_H


	)

26 #i‚de‡
JCONFIG_INCLUDED


27 
	~"jc⁄fig.h
"

29 
	~"jm‹ecfg.h
"

32 #ifde‡
__˝lu•lus


33 #i‚de‡
DONT_USE_EXTERN_C


44 
	#DCTSIZE
 8

	)

45 
	#DCTSIZE2
 64

	)

46 
	#NUM_QUANT_TBLS
 4

	)

47 
	#NUM_HUFF_TBLS
 4

	)

48 
	#NUM_ARITH_TBLS
 16

	)

49 
	#MAX_COMPS_IN_SCAN
 4

	)

50 
	#MAX_SAMP_FACTOR
 4

	)

58 
	#C_MAX_BLOCKS_IN_MCU
 10

	)

59 #i‚de‡
D_MAX_BLOCKS_IN_MCU


60 
	#D_MAX_BLOCKS_IN_MCU
 10

	)

67 
JSAMPLE
 *
	tJSAMPROW
;

68 
JSAMPROW
 *
	tJSAMPARRAY
;

69 
JSAMPARRAY
 *
	tJSAMPIMAGE
;

71 
JCOEF
 
	tJBLOCK
[
DCTSIZE2
];

72 
JBLOCK
 *
	tJBLOCKROW
;

73 
JBLOCKROW
 *
	tJBLOCKARRAY
;

74 
JBLOCKARRAY
 *
	tJBLOCKIMAGE
;

76 
JCOEF
 *
	tJCOEFPTR
;

89 
UINT16
 
qu™tvÆ
[
DCTSIZE2
];

95 
boﬁón
 
£¡_èbÀ
;

96 } 
	tJQUANT_TBL
;

103 
UINT8
 
bôs
[17];

105 
UINT8
 
huffvÆ
[256];

111 
boﬁón
 
£¡_èbÀ
;

112 } 
	tJHUFF_TBL
;

121 
comp⁄ít_id
;

122 
comp⁄ít_ödex
;

123 
h_ßmp_Á˘‹
;

124 
v_ßmp_Á˘‹
;

125 
qu™t_tbl_no
;

130 
dc_tbl_no
;

131 
ac_tbl_no
;

140 
JDIMENSION
 
width_ö_blocks
;

141 
JDIMENSION
 
height_ö_blocks
;

148 #i‡
JPEG_LIB_VERSION
 >= 70

149 
DCT_h_sˇÀd_size
;

150 
DCT_v_sˇÀd_size
;

152 
DCT_sˇÀd_size
;

160 
JDIMENSION
 
downßm∂ed_width
;

161 
JDIMENSION
 
downßm∂ed_height
;

166 
boﬁón
 
comp⁄ít_√eded
;

170 
MCU_width
;

171 
MCU_height
;

172 
MCU_blocks
;

173 
MCU_ßm∂e_width
;

174 
œ°_cﬁ_width
;

175 
œ°_row_height
;

181 
JQUANT_TBL
 * 
qu™t_èbÀ
;

184 * 
d˘_èbÀ
;

185 } 
	tj≥g_comp⁄ít_öfo
;

191 
comps_ö_sˇn
;

192 
comp⁄ít_ödex
[
MAX_COMPS_IN_SCAN
];

193 
Ss
, 
Se
;

194 
Ah
, 
Al
;

195 } 
	tj≥g_sˇn_öfo
;

199 
j≥g_m¨kî_°ru˘
 * 
	tj≥g_ßved_m¨kî_±r
;

201 
	sj≥g_m¨kî_°ru˘
 {

202 
j≥g_ßved_m¨kî_±r
 
√xt
;

203 
UINT8
 
m¨kî
;

204 
‹igöÆ_Àngth
;

205 
d©a_Àngth
;

206 
JOCTET
 * 
d©a
;

212 
	#JCS_EXTENSIONS
 1

	)

213 
	#JCS_ALPHA_EXTENSIONS
 1

	)

216 
JCS_UNKNOWN
,

217 
JCS_GRAYSCALE
,

218 
JCS_RGB
,

220 
JCS_YCbCr
,

221 
JCS_CMYK
,

222 
JCS_YCCK
,

223 
JCS_EXT_RGB
,

224 
JCS_EXT_RGBX
,

225 
JCS_EXT_BGR
,

226 
JCS_EXT_BGRX
,

227 
JCS_EXT_XBGR
,

228 
JCS_EXT_XRGB
,

235 
JCS_EXT_RGBA
,

236 
JCS_EXT_BGRA
,

237 
JCS_EXT_ABGR
,

238 
JCS_EXT_ARGB
,

239 
JCS_RGB565


240 } 
	tJ_COLOR_SPACE
;

245 
JDCT_ISLOW
,

246 
JDCT_IFAST
,

247 
JDCT_FLOAT


248 } 
	tJ_DCT_METHOD
;

250 #i‚de‡
JDCT_DEFAULT


251 
	#JDCT_DEFAULT
 
JDCT_ISLOW


	)

253 #i‚de‡
JDCT_FASTEST


254 
	#JDCT_FASTEST
 
JDCT_IFAST


	)

260 
JDITHER_NONE
,

261 
JDITHER_ORDERED
,

262 
JDITHER_FS


263 } 
	tJ_DITHER_MODE
;

268 
	#j≥g_comm⁄_fõlds
 \

269 
j≥g_îr‹_mgr
 * 
îr
; \

270 
j≥g_mem‹y_mgr
 * 
mem
; \

271 
j≥g_¥ogªss_mgr
 * 
¥ogªss
; \

272 * 
˛õ¡_d©a
; \

273 
boﬁón
 
is_decom¥ess‹
; \

274 
globÆ_°©e


	)

280 
	sj≥g_comm⁄_°ru˘
 {

281 
j≥g_comm⁄_fõlds
;

288 
j≥g_comm⁄_°ru˘
 * 
	tj_comm⁄_±r
;

289 
j≥g_com¥ess_°ru˘
 * 
	tj_com¥ess_±r
;

290 
j≥g_decom¥ess_°ru˘
 * 
	tj_decom¥ess_±r
;

295 
	sj≥g_com¥ess_°ru˘
 {

296 
j≥g_comm⁄_fõlds
;

299 
j≥g_de°ö©i⁄_mgr
 * 
de°
;

306 
JDIMENSION
 
image_width
;

307 
JDIMENSION
 
image_height
;

308 
öput_comp⁄íts
;

309 
J_COLOR_SPACE
 
ö_cﬁ‹_•a˚
;

311 
öput_gamma
;

321 #i‡
JPEG_LIB_VERSION
 >= 70

322 
sˇÀ_num
, 
sˇÀ_díom
;

324 
JDIMENSION
 
j≥g_width
;

325 
JDIMENSION
 
j≥g_height
;

334 
d©a_¥ecisi⁄
;

336 
num_comp⁄íts
;

337 
J_COLOR_SPACE
 
j≥g_cﬁ‹_•a˚
;

339 
j≥g_comp⁄ít_öfo
 * 
comp_öfo
;

342 
JQUANT_TBL
 * 
qu™t_tbl_±rs
[
NUM_QUANT_TBLS
];

343 #i‡
JPEG_LIB_VERSION
 >= 70

344 
q_sˇÀ_Á˘‹
[
NUM_QUANT_TBLS
];

350 
JHUFF_TBL
 * 
dc_huff_tbl_±rs
[
NUM_HUFF_TBLS
];

351 
JHUFF_TBL
 * 
ac_huff_tbl_±rs
[
NUM_HUFF_TBLS
];

354 
UINT8
 
¨ôh_dc_L
[
NUM_ARITH_TBLS
];

355 
UINT8
 
¨ôh_dc_U
[
NUM_ARITH_TBLS
];

356 
UINT8
 
¨ôh_ac_K
[
NUM_ARITH_TBLS
];

358 
num_sˇns
;

359 c⁄° 
j≥g_sˇn_öfo
 * 
sˇn_öfo
;

365 
boﬁón
 
øw_d©a_ö
;

366 
boﬁón
 
¨ôh_code
;

367 
boﬁón
 
›timize_codög
;

368 
boﬁón
 
CCIR601_ßm∂ög
;

369 #i‡
JPEG_LIB_VERSION
 >= 70

370 
boﬁón
 
do_Áncy_downßm∂ög
;

372 
smoŸhög_Á˘‹
;

373 
J_DCT_METHOD
 
d˘_mëhod
;

380 
ª°¨t_öãrvÆ
;

381 
ª°¨t_ö_rows
;

385 
boﬁón
 
wrôe_JFIF_hódî
;

386 
UINT8
 
JFIF_maj‹_vîsi⁄
;

387 
UINT8
 
JFIF_mö‹_vîsi⁄
;

392 
UINT8
 
dísôy_unô
;

393 
UINT16
 
X_dísôy
;

394 
UINT16
 
Y_dísôy
;

395 
boﬁón
 
wrôe_Adobe_m¨kî
;

402 
JDIMENSION
 
√xt_sˇ∆öe
;

411 
boﬁón
 
¥ogªssive_mode
;

412 
max_h_ßmp_Á˘‹
;

413 
max_v_ßmp_Á˘‹
;

415 #i‡
JPEG_LIB_VERSION
 >= 70

416 
mö_DCT_h_sˇÀd_size
;

417 
mö_DCT_v_sˇÀd_size
;

420 
JDIMENSION
 
tŸÆ_iMCU_rows
;

431 
comps_ö_sˇn
;

432 
j≥g_comp⁄ít_öfo
 * 
cur_comp_öfo
[
MAX_COMPS_IN_SCAN
];

435 
JDIMENSION
 
MCUs_≥r_row
;

436 
JDIMENSION
 
MCU_rows_ö_sˇn
;

438 
blocks_ö_MCU
;

439 
MCU_membîshù
[
C_MAX_BLOCKS_IN_MCU
];

443 
Ss
, 
Se
, 
Ah
, 
Al
;

445 #i‡
JPEG_LIB_VERSION
 >= 80

446 
block_size
;

447 c⁄° * 
«tuøl_‹dî
;

448 
lim_Se
;

454 
j≥g_comp_ma°î
 * 
ma°î
;

455 
j≥g_c_maö_c⁄åﬁÀr
 * 
maö
;

456 
j≥g_c_¥ï_c⁄åﬁÀr
 * 
¥ï
;

457 
j≥g_c_c€f_c⁄åﬁÀr
 * 
c€f
;

458 
j≥g_m¨kî_wrôî
 * 
m¨kî
;

459 
j≥g_cﬁ‹_c⁄vîãr
 * 
cc⁄vît
;

460 
j≥g_downßm∂î
 * 
downßm∂e
;

461 
j≥g_f‹w¨d_d˘
 * 
fd˘
;

462 
j≥g_íå›y_ícodî
 * 
íå›y
;

463 
j≥g_sˇn_öfo
 * 
s¸ùt_•a˚
;

464 
s¸ùt_•a˚_size
;

470 
	sj≥g_decom¥ess_°ru˘
 {

471 
j≥g_comm⁄_fõlds
;

474 
j≥g_sour˚_mgr
 * 
§c
;

479 
JDIMENSION
 
image_width
;

480 
JDIMENSION
 
image_height
;

481 
num_comp⁄íts
;

482 
J_COLOR_SPACE
 
j≥g_cﬁ‹_•a˚
;

489 
J_COLOR_SPACE
 
out_cﬁ‹_•a˚
;

491 
sˇÀ_num
, 
sˇÀ_díom
;

493 
ouçut_gamma
;

495 
boﬁón
 
buf„ªd_image
;

496 
boﬁón
 
øw_d©a_out
;

498 
J_DCT_METHOD
 
d˘_mëhod
;

499 
boﬁón
 
do_Áncy_upßm∂ög
;

500 
boﬁón
 
do_block_smoŸhög
;

502 
boﬁón
 
qu™tize_cﬁ‹s
;

504 
J_DITHER_MODE
 
dôhî_mode
;

505 
boﬁón
 
two_∑ss_qu™tize
;

506 
desúed_numbî_of_cﬁ‹s
;

508 
boﬁón
 
íabÀ_1∑ss_qu™t
;

509 
boﬁón
 
íabÀ_exã∫Æ_qu™t
;

510 
boﬁón
 
íabÀ_2∑ss_qu™t
;

518 
JDIMENSION
 
ouçut_width
;

519 
JDIMENSION
 
ouçut_height
;

520 
out_cﬁ‹_comp⁄íts
;

521 
ouçut_comp⁄íts
;

525 
ªc_outbuf_height
;

537 
a˘uÆ_numbî_of_cﬁ‹s
;

538 
JSAMPARRAY
 
cﬁ‹m≠
;

548 
JDIMENSION
 
ouçut_sˇ∆öe
;

553 
öput_sˇn_numbî
;

554 
JDIMENSION
 
öput_iMCU_row
;

560 
ouçut_sˇn_numbî
;

561 
JDIMENSION
 
ouçut_iMCU_row
;

570 (*
c€f_bôs
)[
DCTSIZE2
];

581 
JQUANT_TBL
 * 
qu™t_tbl_±rs
[
NUM_QUANT_TBLS
];

584 
JHUFF_TBL
 * 
dc_huff_tbl_±rs
[
NUM_HUFF_TBLS
];

585 
JHUFF_TBL
 * 
ac_huff_tbl_±rs
[
NUM_HUFF_TBLS
];

592 
d©a_¥ecisi⁄
;

594 
j≥g_comp⁄ít_öfo
 * 
comp_öfo
;

597 #i‡
JPEG_LIB_VERSION
 >= 80

598 
boﬁón
 
is_ba£löe
;

600 
boﬁón
 
¥ogªssive_mode
;

601 
boﬁón
 
¨ôh_code
;

603 
UINT8
 
¨ôh_dc_L
[
NUM_ARITH_TBLS
];

604 
UINT8
 
¨ôh_dc_U
[
NUM_ARITH_TBLS
];

605 
UINT8
 
¨ôh_ac_K
[
NUM_ARITH_TBLS
];

607 
ª°¨t_öãrvÆ
;

612 
boﬁón
 
ßw_JFIF_m¨kî
;

614 
UINT8
 
JFIF_maj‹_vîsi⁄
;

615 
UINT8
 
JFIF_mö‹_vîsi⁄
;

616 
UINT8
 
dísôy_unô
;

617 
UINT16
 
X_dísôy
;

618 
UINT16
 
Y_dísôy
;

619 
boﬁón
 
ßw_Adobe_m¨kî
;

620 
UINT8
 
Adobe_å™sf‹m
;

622 
boﬁón
 
CCIR601_ßm∂ög
;

628 
j≥g_ßved_m¨kî_±r
 
m¨kî_li°
;

637 
max_h_ßmp_Á˘‹
;

638 
max_v_ßmp_Á˘‹
;

640 #i‡
JPEG_LIB_VERSION
 >= 70

641 
mö_DCT_h_sˇÀd_size
;

642 
mö_DCT_v_sˇÀd_size
;

644 
mö_DCT_sˇÀd_size
;

647 
JDIMENSION
 
tŸÆ_iMCU_rows
;

656 
JSAMPLE
 * 
ßm∂e_ønge_limô
;

663 
comps_ö_sˇn
;

664 
j≥g_comp⁄ít_öfo
 * 
cur_comp_öfo
[
MAX_COMPS_IN_SCAN
];

667 
JDIMENSION
 
MCUs_≥r_row
;

668 
JDIMENSION
 
MCU_rows_ö_sˇn
;

670 
blocks_ö_MCU
;

671 
MCU_membîshù
[
D_MAX_BLOCKS_IN_MCU
];

675 
Ss
, 
Se
, 
Ah
, 
Al
;

677 #i‡
JPEG_LIB_VERSION
 >= 80

680 
block_size
;

681 c⁄° * 
«tuøl_‹dî
;

682 
lim_Se
;

689 
uƒód_m¨kî
;

694 
j≥g_decomp_ma°î
 * 
ma°î
;

695 
j≥g_d_maö_c⁄åﬁÀr
 * 
maö
;

696 
j≥g_d_c€f_c⁄åﬁÀr
 * 
c€f
;

697 
j≥g_d_po°_c⁄åﬁÀr
 * 
po°
;

698 
j≥g_öput_c⁄åﬁÀr
 * 
öput˘l
;

699 
j≥g_m¨kî_ªadî
 * 
m¨kî
;

700 
j≥g_íå›y_decodî
 * 
íå›y
;

701 
j≥g_övî£_d˘
 * 
id˘
;

702 
j≥g_upßm∂î
 * 
upßm∂e
;

703 
j≥g_cﬁ‹_dec⁄vîãr
 * 
cc⁄vît
;

704 
j≥g_cﬁ‹_qu™tizî
 * 
cqu™tize
;

718 
	sj≥g_îr‹_mgr
 {

720 (*
îr‹_exô
Ë(
j_comm⁄_±r
 
cöfo
);

722 (*
emô_mesßge
Ë(
j_comm⁄_±r
 
cöfo
, 
msg_Àvñ
);

724 (*
ouçut_mesßge
Ë(
j_comm⁄_±r
 
cöfo
);

726 (*
f‹m©_mesßge
Ë(
j_comm⁄_±r
 
cöfo
, * 
buf„r
);

727 
	#JMSG_LENGTH_MAX
 200

	)

729 (*
ª£t_îr‹_mgr
Ë(
j_comm⁄_±r
 
cöfo
);

734 
msg_code
;

735 
	#JMSG_STR_PARM_MAX
 80

	)

737 
i
[8];

738 
s
[
JMSG_STR_PARM_MAX
];

739 } 
msg_∑rm
;

743 
åa˚_Àvñ
;

751 
num_w¨nögs
;

763 c⁄° * c⁄° * 
j≥g_mesßge_èbÀ
;

764 
œ°_j≥g_mesßge
;

768 c⁄° * c⁄° * 
add⁄_mesßge_èbÀ
;

769 
fú°_add⁄_mesßge
;

770 
œ°_add⁄_mesßge
;

776 
	sj≥g_¥ogªss_mgr
 {

777 (*
¥ogªss_m⁄ô‹
Ë(
j_comm⁄_±r
 
cöfo
);

779 
∑ss_cou¡î
;

780 
∑ss_limô
;

781 
com∂ëed_∑s£s
;

782 
tŸÆ_∑s£s
;

788 
	sj≥g_de°ö©i⁄_mgr
 {

789 
JOCTET
 * 
√xt_ouçut_byã
;

790 
size_t
 
‰ì_ö_buf„r
;

792 (*
öô_de°ö©i⁄
Ë(
j_com¥ess_±r
 
cöfo
);

793 
boﬁón
 (*
em±y_ouçut_buf„r
Ë(
j_com¥ess_±r
 
cöfo
);

794 (*
ãrm_de°ö©i⁄
Ë(
j_com¥ess_±r
 
cöfo
);

800 
	sj≥g_sour˚_mgr
 {

801 c⁄° 
JOCTET
 * 
√xt_öput_byã
;

802 
size_t
 
byãs_ö_buf„r
;

804 (*
öô_sour˚
Ë(
j_decom¥ess_±r
 
cöfo
);

805 
boﬁón
 (*
fûl_öput_buf„r
Ë(
j_decom¥ess_±r
 
cöfo
);

806 (*
skù_öput_d©a
Ë(
j_decom¥ess_±r
 
cöfo
, 
num_byãs
);

807 
boﬁón
 (*
ªsync_to_ª°¨t
Ë(
j_decom¥ess_±r
 
cöfo
, 
desúed
);

808 (*
ãrm_sour˚
Ë(
j_decom¥ess_±r
 
cöfo
);

823 
	#JPOOL_PERMANENT
 0

	)

824 
	#JPOOL_IMAGE
 1

	)

825 
	#JPOOL_NUMPOOLS
 2

	)

827 
jvút_ßºay_c⁄åﬁ
 * 
	tjvút_ßºay_±r
;

828 
jvút_b¨øy_c⁄åﬁ
 * 
	tjvút_b¨øy_±r
;

831 
	sj≥g_mem‹y_mgr
 {

833 * (*
Æloc_smÆl
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
, 
size_t
 
sizeofobje˘
);

834 * (*
Æloc_œrge
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

835 
size_t
 
sizeofobje˘
);

836 
JSAMPARRAY
 (*
Æloc_ßºay
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

837 
JDIMENSION
 
ßm∂e•îrow
, JDIMENSION 
numrows
);

838 
JBLOCKARRAY
 (*
Æloc_b¨øy
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

839 
JDIMENSION
 
block•îrow
, JDIMENSION 
numrows
);

840 
jvút_ßºay_±r
 (*
ªque°_vút_ßºay
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

841 
boﬁón
 
¥e_zîo
,

842 
JDIMENSION
 
ßm∂e•îrow
,

843 
JDIMENSION
 
numrows
,

844 
JDIMENSION
 
maxac˚ss
);

845 
jvút_b¨øy_±r
 (*
ªque°_vút_b¨øy
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

846 
boﬁón
 
¥e_zîo
,

847 
JDIMENSION
 
block•îrow
,

848 
JDIMENSION
 
numrows
,

849 
JDIMENSION
 
maxac˚ss
);

850 (*
ªÆize_vút_¨øys
Ë(
j_comm⁄_±r
 
cöfo
);

851 
JSAMPARRAY
 (*
ac˚ss_vút_ßºay
Ë(
j_comm⁄_±r
 
cöfo
, 
jvút_ßºay_±r
 
±r
,

852 
JDIMENSION
 
°¨t_row
, JDIMENSION 
num_rows
,

853 
boﬁón
 
wrôabÀ
);

854 
JBLOCKARRAY
 (*
ac˚ss_vút_b¨øy
Ë(
j_comm⁄_±r
 
cöfo
, 
jvút_b¨øy_±r
 
±r
,

855 
JDIMENSION
 
°¨t_row
, JDIMENSION 
num_rows
,

856 
boﬁón
 
wrôabÀ
);

857 (*
‰ì_poﬁ
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
);

858 (*
£lf_de°ru˘
Ë(
j_comm⁄_±r
 
cöfo
);

865 
max_mem‹y_to_u£
;

868 
max_Æloc_chunk
;

875 
boﬁón
 (*
	tj≥g_m¨kî_∑r£r_mëhod
Ë(
	tj_decom¥ess_±r
 
	tcöfo
);

885 
	#JPP
(
¨gli°
Ë
	)
arglist

889 
EXTERN
(
j≥g_îr‹_mgr
 *Ë
j≥g_°d_îr‹
 (j≥g_îr‹_mg∏* 
îr
);

898 
	#j≥g_¸óã_com¥ess
(
cöfo
) \

899 
	`j≥g_Cª©eCom¥ess
((
cöfo
), 
JPEG_LIB_VERSION
, \

900 (
size_t
Ë(
j≥g_com¥ess_°ru˘
))

	)

901 
	#j≥g_¸óã_decom¥ess
(
cöfo
) \

902 
	`j≥g_Cª©eDecom¥ess
((
cöfo
), 
JPEG_LIB_VERSION
, \

903 (
size_t
Ë(
j≥g_decom¥ess_°ru˘
))

	)

904 
EXTERN
(Ë
j≥g_Cª©eCom¥ess
 (
j_com¥ess_±r
 
cöfo
, 
vîsi⁄
,

905 
size_t
 
°ru˘size
);

906 
EXTERN
(Ë
j≥g_Cª©eDecom¥ess
 (
j_decom¥ess_±r
 
cöfo
, 
vîsi⁄
,

907 
size_t
 
°ru˘size
);

909 
EXTERN
(Ë
j≥g_de°roy_com¥ess
 (
j_com¥ess_±r
 
cöfo
);

910 
EXTERN
(Ë
j≥g_de°roy_decom¥ess
 (
j_decom¥ess_±r
 
cöfo
);

914 
EXTERN
(Ë
j≥g_°dio_de°
 (
j_com¥ess_±r
 
cöfo
, 
FILE
 * 
outfûe
);

915 
EXTERN
(Ë
j≥g_°dio_§c
 (
j_decom¥ess_±r
 
cöfo
, 
FILE
 * 
öfûe
);

917 #i‡
JPEG_LIB_VERSION
 >80 || 
deföed
(
MEM_SRCDST_SUPPORTED
)

919 
EXTERN
(Ë
j≥g_mem_de°
 (
j_com¥ess_±r
 
cöfo
, ** 
outbuf„r
,

920 * 
outsize
);

921 
EXTERN
(Ë
j≥g_mem_§c
 (
j_decom¥ess_±r
 
cöfo
, * 
öbuf„r
,

922 
ösize
);

926 
EXTERN
(Ë
j≥g_£t_deÁu…s
 (
j_com¥ess_±r
 
cöfo
);

928 
EXTERN
(Ë
j≥g_£t_cﬁ‹•a˚
 (
j_com¥ess_±r
 
cöfo
,

929 
J_COLOR_SPACE
 
cﬁ‹•a˚
);

930 
EXTERN
(Ë
j≥g_deÁu…_cﬁ‹•a˚
 (
j_com¥ess_±r
 
cöfo
);

931 
EXTERN
(Ë
j≥g_£t_quÆôy
 (
j_com¥ess_±r
 
cöfo
, 
quÆôy
,

932 
boﬁón
 
f‹˚_ba£löe
);

933 
EXTERN
(Ë
j≥g_£t_löór_quÆôy
 (
j_com¥ess_±r
 
cöfo
, 
sˇÀ_Á˘‹
,

934 
boﬁón
 
f‹˚_ba£löe
);

935 #i‡
JPEG_LIB_VERSION
 >= 70

936 
EXTERN
(Ë
j≥g_deÁu…_qèbÀs
 (
j_com¥ess_±r
 
cöfo
,

937 
boﬁón
 
f‹˚_ba£löe
);

939 
EXTERN
(Ë
j≥g_add_qu™t_èbÀ
 (
j_com¥ess_±r
 
cöfo
, 
which_tbl
,

940 c⁄° *
basic_èbÀ
,

941 
sˇÀ_Á˘‹
, 
boﬁón
 
f‹˚_ba£löe
);

942 
EXTERN
(Ë
j≥g_quÆôy_sˇlög
 (
quÆôy
);

943 
EXTERN
(Ë
j≥g_sim∂e_¥ogªssi⁄
 (
j_com¥ess_±r
 
cöfo
);

944 
EXTERN
(Ë
j≥g_suµªss_èbÀs
 (
j_com¥ess_±r
 
cöfo
, 
boﬁón
 
suµªss
);

945 
EXTERN
(
JQUANT_TBL
 *Ë
j≥g_Æloc_qu™t_èbÀ
 (
j_comm⁄_±r
 
cöfo
);

946 
EXTERN
(
JHUFF_TBL
 *Ë
j≥g_Æloc_huff_èbÀ
 (
j_comm⁄_±r
 
cöfo
);

949 
EXTERN
(Ë
j≥g_°¨t_com¥ess
 (
j_com¥ess_±r
 
cöfo
,

950 
boﬁón
 
wrôe_Æl_èbÀs
);

951 
EXTERN
(
JDIMENSION
Ë
j≥g_wrôe_sˇ∆öes
 (
j_com¥ess_±r
 
cöfo
,

952 
JSAMPARRAY
 
sˇ∆öes
,

953 
JDIMENSION
 
num_löes
);

954 
EXTERN
(Ë
j≥g_föish_com¥ess
 (
j_com¥ess_±r
 
cöfo
);

956 #i‡
JPEG_LIB_VERSION
 >= 70

958 
EXTERN
(Ë
j≥g_ˇlc_j≥g_dimísi⁄s
 (
j_com¥ess_±r
 
cöfo
);

962 
EXTERN
(
JDIMENSION
Ë
j≥g_wrôe_øw_d©a
 (
j_com¥ess_±r
 
cöfo
, 
JSAMPIMAGE
 
d©a
,

963 
JDIMENSION
 
num_löes
);

966 
EXTERN
(Ë
j≥g_wrôe_m¨kî
 (
j_com¥ess_±r
 
cöfo
, 
m¨kî
,

967 c⁄° 
JOCTET
 * 
d©≠å
, 
d©Æí
);

969 
EXTERN
(Ë
j≥g_wrôe_m_hódî
 (
j_com¥ess_±r
 
cöfo
, 
m¨kî
,

970 
d©Æí
);

971 
EXTERN
(Ë
j≥g_wrôe_m_byã
 (
j_com¥ess_±r
 
cöfo
, 
vÆ
);

974 
EXTERN
(Ë
j≥g_wrôe_èbÀs
 (
j_com¥ess_±r
 
cöfo
);

977 
EXTERN
(Ë
j≥g_ªad_hódî
 (
j_decom¥ess_±r
 
cöfo
, 
boﬁón
 
ªquúe_image
);

979 
	#JPEG_SUSPENDED
 0

	)

980 
	#JPEG_HEADER_OK
 1

	)

981 
	#JPEG_HEADER_TABLES_ONLY
 2

	)

989 
EXTERN
(
boﬁón
Ë
j≥g_°¨t_decom¥ess
 (
j_decom¥ess_±r
 
cöfo
);

990 
EXTERN
(
JDIMENSION
Ë
j≥g_ªad_sˇ∆öes
 (
j_decom¥ess_±r
 
cöfo
,

991 
JSAMPARRAY
 
sˇ∆öes
,

992 
JDIMENSION
 
max_löes
);

993 
EXTERN
(
boﬁón
Ë
j≥g_föish_decom¥ess
 (
j_decom¥ess_±r
 
cöfo
);

996 
EXTERN
(
JDIMENSION
Ë
j≥g_ªad_øw_d©a
 (
j_decom¥ess_±r
 
cöfo
, 
JSAMPIMAGE
 
d©a
,

997 
JDIMENSION
 
max_löes
);

1000 
EXTERN
(
boﬁón
Ë
j≥g_has_mu…ùÀ_sˇns
 (
j_decom¥ess_±r
 
cöfo
);

1001 
EXTERN
(
boﬁón
Ë
j≥g_°¨t_ouçut
 (
j_decom¥ess_±r
 
cöfo
, 
sˇn_numbî
);

1002 
EXTERN
(
boﬁón
Ë
j≥g_föish_ouçut
 (
j_decom¥ess_±r
 
cöfo
);

1003 
EXTERN
(
boﬁón
Ë
j≥g_öput_com∂ëe
 (
j_decom¥ess_±r
 
cöfo
);

1004 
EXTERN
(Ë
j≥g_√w_cﬁ‹m≠
 (
j_decom¥ess_±r
 
cöfo
);

1005 
EXTERN
(Ë
j≥g_c⁄sume_öput
 (
j_decom¥ess_±r
 
cöfo
);

1008 
	#JPEG_REACHED_SOS
 1

	)

1009 
	#JPEG_REACHED_EOI
 2

	)

1010 
	#JPEG_ROW_COMPLETED
 3

	)

1011 
	#JPEG_SCAN_COMPLETED
 4

	)

1014 #i‡
JPEG_LIB_VERSION
 >= 80

1015 
EXTERN
(Ë
j≥g_c‹e_ouçut_dimísi⁄s
 (
j_decom¥ess_±r
 
cöfo
);

1017 
EXTERN
(Ë
j≥g_ˇlc_ouçut_dimísi⁄s
 (
j_decom¥ess_±r
 
cöfo
);

1020 
EXTERN
(Ë
j≥g_ßve_m¨kîs
 (
j_decom¥ess_±r
 
cöfo
, 
m¨kî_code
,

1021 
Àngth_limô
);

1024 
EXTERN
(Ë
j≥g_£t_m¨kî_¥o˚ss‹
 (
j_decom¥ess_±r
 
cöfo
,

1025 
m¨kî_code
,

1026 
j≥g_m¨kî_∑r£r_mëhod
 
routöe
);

1029 
EXTERN
(
jvút_b¨øy_±r
 *Ë
j≥g_ªad_c€fficõ¡s
 (
j_decom¥ess_±r
 
cöfo
);

1030 
EXTERN
(Ë
j≥g_wrôe_c€fficõ¡s
 (
j_com¥ess_±r
 
cöfo
,

1031 
jvút_b¨øy_±r
 * 
c€f_¨øys
);

1032 
EXTERN
(Ë
j≥g_c›y_¸ôiˇl_∑ømëîs
 (
j_decom¥ess_±r
 
§cöfo
,

1033 
j_com¥ess_±r
 
d°öfo
);

1041 
EXTERN
(Ë
j≥g_ab‹t_com¥ess
 (
j_com¥ess_±r
 
cöfo
);

1042 
EXTERN
(Ë
j≥g_ab‹t_decom¥ess
 (
j_decom¥ess_±r
 
cöfo
);

1047 
EXTERN
(Ë
j≥g_ab‹t
 (
j_comm⁄_±r
 
cöfo
);

1048 
EXTERN
(Ë
j≥g_de°roy
 (
j_comm⁄_±r
 
cöfo
);

1051 
EXTERN
(
boﬁón
Ë
j≥g_ªsync_to_ª°¨t
 (
j_decom¥ess_±r
 
cöfo
, 
desúed
);

1058 
	#JPEG_RST0
 0xD0

	)

1059 
	#JPEG_EOI
 0xD9

	)

1060 
	#JPEG_APP0
 0xE0

	)

1061 
	#JPEG_COM
 0xFE

	)

1069 #ifde‡
INCOMPLETE_TYPES_BROKEN


1070 #i‚de‡
JPEG_INTERNALS


1071 
	sjvút_ßºay_c⁄åﬁ
 { 
dummy
; };

1072 
	sjvút_b¨øy_c⁄åﬁ
 { 
dummy
; };

1073 
	sj≥g_comp_ma°î
 { 
dummy
; };

1074 
	sj≥g_c_maö_c⁄åﬁÀr
 { 
dummy
; };

1075 
	sj≥g_c_¥ï_c⁄åﬁÀr
 { 
dummy
; };

1076 
	sj≥g_c_c€f_c⁄åﬁÀr
 { 
dummy
; };

1077 
	sj≥g_m¨kî_wrôî
 { 
dummy
; };

1078 
	sj≥g_cﬁ‹_c⁄vîãr
 { 
dummy
; };

1079 
	sj≥g_downßm∂î
 { 
dummy
; };

1080 
	sj≥g_f‹w¨d_d˘
 { 
dummy
; };

1081 
	sj≥g_íå›y_ícodî
 { 
dummy
; };

1082 
	sj≥g_decomp_ma°î
 { 
dummy
; };

1083 
	sj≥g_d_maö_c⁄åﬁÀr
 { 
dummy
; };

1084 
	sj≥g_d_c€f_c⁄åﬁÀr
 { 
dummy
; };

1085 
	sj≥g_d_po°_c⁄åﬁÀr
 { 
dummy
; };

1086 
	sj≥g_öput_c⁄åﬁÀr
 { 
dummy
; };

1087 
	sj≥g_m¨kî_ªadî
 { 
dummy
; };

1088 
	sj≥g_íå›y_decodî
 { 
dummy
; };

1089 
	sj≥g_övî£_d˘
 { 
dummy
; };

1090 
	sj≥g_upßm∂î
 { 
dummy
; };

1091 
	sj≥g_cﬁ‹_dec⁄vîãr
 { 
dummy
; };

1092 
	sj≥g_cﬁ‹_qu™tizî
 { 
dummy
; };

1104 #ifde‡
JPEG_INTERNALS


1105 
	~"j≥göt.h
"

1106 
	~"jîr‹.h
"

1109 #ifde‡
__˝lu•lus


1110 #i‚de‡
DONT_USE_EXTERN_C


	@
1
.
0
17
247
debug.cpp
debug.h
demo.cpp
demo.h
jpegdecode.cpp
jpegdecode.h
main.cpp
mainwindow.cpp
mainwindow.h
moc_mainwindow.cpp
ringbuffer.cpp
ringbuffer.h
sdk.h
stream.cpp
stream.h
ui_mainwindow.h
/usr/local/libjpeg-turbo-1.4.2/freescale/include/jpeglib.h
